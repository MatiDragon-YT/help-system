<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD><TITLE>Типы данных</TITLE>
<link rel="stylesheet" type="text/css" href="../../style/style.css">
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
</HEAD>
<BODY topMargin=0 >
<TABLE
style="BORDER-RIGHT: medium none; BORDER-TOP: medium none; BORDER-LEFT: medium none; BORDER-BOTTOM: #c0c0c0 1px solid"
height=121 cellSpacing=0 cellPadding=0 width=640>
  <TBODY>
  <TR>
    <TD vAlign=top width="100%"><IMG
      src="img/ru/logo2.jpg" width="640" height="121" border=0 class="conthdr" ></TD>
</TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width=640 border=0>
  <TBODY>

  <TD width="100%" height="100%" vAlign=top>
   <DIV><IMG
      src="img/ru/old/articles/articles.png" width="640" height="33"></DIV>


      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5><IMG height=36
            src="img/ru/mtdl.png" width=5></TD>
          <TD class=ntitle vAlign=top
          background="mtdbg.png" height=36> Типы данных</TD>
          <TD width=5><IMG height=36
            src="img/ru/mtdr.png"
      width=20></TD></TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5 background="ltd.gif"></TD>
          <TD class=news vAlign=top>
<p> Перед вами переработанное издание статьи, включающее в себя все последнюю информацию о типах данных в SB.
<br>
<br>
Новички зачастую не сразу понимают, что означают Integer values, что такое String и т.п. Им и посвящена данная статья.
Условно, те типы данных (Data Types), которые используются в SB можно разделить на <b>числа</b> и <b>строки.</b> Базовым видом данных являются числа. Они, как известно, бывают двух видов: <b>целые</b> и <b>дробные</b>. Важное замечание: отличие между ними состоит не столько в значении самого числа, сколько в его записи. Так число 5.0 с точки зрения математики есть число целое.  Однако в скриптах оно будет именоваться дробным, или числом с плавающей точкой (floating-point value). Все числа, которые имеют в своем написании точку, являются дробными. Пример:</p>
<div class="mycode5">
<span class="general1-number">50.001</span> <br>
<span class="general1-number">-10.750</span> <br>
<span class="general1-number">0.0 </span></div>
<br>
<p>
Для чисел между <span class="general1-number">-1</span> и<span class="general1-number"> 1</span> можно не писать <span class="general1-number">0</span> в начале. Т.е. <span class="general1-number">0.0</span> равнозначно <span class="general1-number">.0</span><br>
<br>
Поскольку способ записи числа имеет значение, то возможны ошибки, когда скриптер забывает написать точку. Компилятор в таком случае расценивает число как целое. Не вдаваясь в отдельные подробности, скажу, что значение этого числа будет немного изменено вследствие этого. В игре после этого могут появиться проблемы. Поэтому следите за этим обстоятельством.
<br>
Некоторые опкоды в игре требуют именно применения дробных значений. Это касается скорости движения отдельных объектов, здоровья, брони и т.п. Поэтому старайтесь точно узнать, какой именно тип необходимо использовать.
<br>
<br>
Sanny Builder в данном случае может помочь вам: внутри классов можно вызвать подсказку, о типах параметров. Подсказка появляется автоматически, когда вы ставите скобку после имени члена класса:

</p>
<div class="mycode5">
<span class="general1-class">Car</span>.<span class="general1-command">PutAt</span>( </div>
<br>
Вы увидете, что 2й, 3й, 4й параметры имеют тип <b>Float</b>. Также подсказку для данного члена класса можно вызвать в любое время нажатием <span class="codes">Ctrl+Shift+Space</span>. <br>
<br>
<div class="mycode5">
<span class="general1-class">Car</span>.<span class="general1-command">PutAt</span>(<span class="general1-variable">$Car</span>, <span class="general1-comment">{нажмите Ctrl+Shift+Space здесь}</span> ) </div>
<br><p>
Похожий тип данных - это <b>хендл (handle)</b>. Строго говоря это простое число, которое представляет собой указатель на какой-либо объект в памяти игры. Опять-таки, опуская подробности, скажу, что хендл - это "имя" объекта (машины, актера и т.п.). По данному имени вы можете обратиться к объекту и производить над ним определенные действия.
Хендлы содержатся в переменных целого типа (Integer values). Их содержимое заполняется после использования специального опкода - конструктора. В SB почти в каждом классе есть такой конструктор.
<br>
Имеются ввиду классы опкодов для динамических объектов, которые создаются непосредственно в игре. Например актер (actor), игрок (player), объект (object) и т.д. Нединамические объекты (гаражи) или некоторые отдельные виды объектов, которые не создаются в ходе игры (модели), такого конструктора не имеют. Конструктор имеет одинаковое для всех классов имя - Create. После его срабатывания игра создает в памяти указатель на новый объект и записывает его в переменную:
</p>
<div class="mycode5">
<span class="general1-variable">$ActorHandle</span> = <span class="general1-class">Actor</span>.<span class="general1-command">Create</span>(CivMale, <span class="general1-model">#MALE01</span>, <span class="general1-number">0.0</span>, <span class="general1-number">0.0</span>, <span class="general1-number">0.0</span>)  </div>
<p>
Теперь хендл актера хранится в переменной <span class="general1-variable">$ActorHandle</span>, и вы можете, используя ее, делать с ним все, что угодно. Хендл можно получить не только создавая нового актера (или еще что-нибудь). В игре существуют специальные опкоды, позволяющие "захватить" случайного прохожего и превратить его таким образом в актера. Но это тема для отдельного разговора.
 <br>
 Как уже говорилось, хендл суть есть обычное число. Его значение можно легко узнать, и в принципе с хендлом можно проводить любые арифметические и логические операции. Поэтому все математические опкоды, предназначенные для целых чисел действительны и для хендлов. В комментариях к ним это иногда указано: </p>

<div class="mycode5">

0084: <span class="general1-variable">$IntVar </span>= <span class="general1-variable">$ActorHandle</span> <span class="general1-comment">// integer values and handles </span></div>
<br><p>
Ну и наконец заключительный тип – <b><a name="string">строка</a> (string)</b>. Он использовался во всех GTA, но только в SA получил развитие.
<br>
<strong>String</strong> представляет собой строку, т.е. набор символов. каждый из которых имеет свое численное выражение. Существует специальная таблица кодов (ASCII), в которой содержатся значения всех символов. В скриптах SA используются два вида строк: фиксированной и переменной длины. Последний вид НЕ поддерживается в GTA3 и VC.
<br>
 Строки фиксированной длины (<b>fixed-length string</b>) могут содержать до 15 символов включительно. Если строка меньше этой длины, остаток заполняется пустотой. Данные строки оформляются в одинарные кавычки:

</p>
<div class="mycode5">
05AA: <span class="general1-variable">s$MyString</span> = <span class="general1-string">'MY_STR'</span></div>
<p>
Обратите внимание, что для работы со строками используется специальный вид переменных. Они обозначаются буквой s: s$GlobalVar, 1@s.
<br>
Данный вид строк может использоваться и как хендл. Обратите внимание на команду</p>
<div class="mycode5">
<span class="general1-reservedword">thread</span> <span class="general1-string">'MAIN'</span> </div>
<br><p>
MAIN в данном случае - это имя потока. Используя его, можно прекратить поток из любого места <br>
</p>
<div class="mycode5">
<span class="general1-reservedword">end_thread_named</span> <span class="general1-string">'MAIN' </span></div>
<br><p>

Или другой пример:</p>
<div class="mycode5">
07D3: <span class="general1-string">'HOUSE'</span> = init_external_script_named_handle <span class="general1-number">23</span> (BURG_BRAINS) </div>
<br><p>

'HOUSE' - хендл внешнего скрипта. <br><br>

Строки, кроме функции хендлов, используются как идентификаторы отдельных полей в .GXT-файле. <br>Например:
</p>
<div class="mycode5">
00BA: text_styled <span class="stro">'STAD_01'</span> <span class="general1-number">1000</span> ms <span class="general1-number">2 </span></div>
<p>
Другой вид строк - <b>строки переменной длины (variable-length string)</b>. Они обозначаются двойными кавычками и могут содержать в себе большее по сравнению с предыдущим видом число символов. Точное число определяется самим опкодом.
<br>
Данный вид может использоваться для тех же целей, что и предыдущий. Чаще всего в оригинальных скриптах он используется для указания имен анимаций</p>
<div class="mycode5">
04ED: load_animation <span class="general1-string">"LOWRIDER" </span></div>
<p>
Переменные, содержащие такие строки, обозначаются символом v: v$GlobalVar, 1@v.
<br><br>
Ограничений по использованию разных видов строк нет. Это значит, что вы можете использовать в опкоде либо первый, либо второй вид, на ваше усмотрение. Однако учитывайте, что лимит на количество символов устанавливается самим опкодом. Например, вы можете использовать код:
</p>
<div class="mycode5">
03A4: name_thread <span class="general1-string">'LONGNAME'</span></div>
<p>
Однако данный опкод использует только первые 7 символов строки. Это значит, что поток после этого будет иметь имя LONGNAM, а не LONGNAMЕ, как вам хотелось.
<br><br>
Со строками можно проводить все основные виды операций: присваивание, сравнение, конкатенация (сложение строк).
<br><br>
<b>1. Присваивание </b><br>
</p>
<div class="mycode5">
05AA: <span class="general1-variable">s$Var</span> = <span class="general1-string">'IE16'</span> <span class="general1-comment">// в переменную записывается строка IE16</span><br>
06D1: <span class="general1-variable">v$Var</span> = <span class="general1-string">"NIL"</span> <span class="general1-comment">// в переменную записывается строка NIL</span></div>
<p>
Обратите внимание, справа может быть не только строка, но и стринговая переменная. Например, </p>
<div class="mycode5">
05AA: <span class="general1-variable">s$Var </span>=<span class="general1-variable"> s$Var2</span> </div>
<br><br><b>
2. Сравнение</b><br>
<br><br>
<div class="mycode5">
05AD: <span class="general1-variable">s$Var</span> == <span class="general1-variable">s$Var2 </span><span class="general1-comment"><br>
// проверка срабатывает, если содержимое переменных одинаково</span><br>
08F9: <span class="general1-variable">v$Var</span> == <span class="general1-variable">v$Var2</span><span class="general1-comment"> <br> // проверка срабатывает, если содержимое переменных одинаково</span> </div>
<br>
Обратите внимание, справа может быть не только стринговая переменная, но и строка. <br> Например,  <br> <br>

<div class="mycode5">
08F9: <span class="general1-variable">v$Var </span>== <span class="general1-string">"string" </span></div>
<p>
Проверки чувствительны к регистру, но поскольку по умолчанию все строки компилируются в верхнем регистре, данный факт будет иметь значение только при включенной опции регистра букв «Как есть».
<br><br>
Вы также можете проверять пустая ли строка. Для этого есть целых 4 одинаковых опкода:
</p>
<div class="mycode5">
0844:   string <span class="general1-variable">s$Var</span> empty<br>
0845:   string <span class="general1-variable">s$Var</span> empty<br>
0846:   string <span class="general1-variable">s$Var</span> empty<br>
0847:   string <span class="general1-variable">s$Var</span> empty </div>
<p>
Все эти проверки работают абсолютно одинаково и срабатывают, если строка не содержит символов.
<br><br>
<b>3. Сложение строк</b><br>
</p>
<div class="mycode5">
098B: <span class="general1-variable">s$result</span> = <span class="general1-variable">s$var1</span> + <span class="general1-variable">s$var2</span><br>
098C: <span class="general1-variable">s$result</span> = <span class="general1-variable">s$var1</span> + <span class="general1-variable">s$var2</span></div>
<p>
Оба этих опкода одинаковы. Все параметры должны являться стринговыми переменными. Принцип работы таков: берется строка из переменной var1, складывается со строкой из var2 и результат записывается в переменную result.
 <br> <br>

Перечисленные выше типы данных присущи и элементам массивов. Т.е. массивы могут быть типа Integer, Float, String. Подробнее о массивах см. <a href="arrays.htm"> здесь


</a> </p>
22.02.2007<br>            </TD>
          <TD width=5
        background="rtd.gif"></TD></TR>
        </TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5><IMG height=20
            src="img/ru/mtdlbot.png" width=5 border=0></TD>
          <TD align=left
            background="mtdbgbot.png"></TD>
          <TD class=ninfo align=right
          background="mtdbgbot.png">&nbsp;
            </TD>
          <TD width=5><IMG height=20
            src="img/ru/mtdrbot.png" width=5
        border=0></TD></TR></TBODY></TABLE></DIV>
<BR><BR></TD></TR><td width="100%"></TBODY></TABLE>
</TABLE></body></html>
