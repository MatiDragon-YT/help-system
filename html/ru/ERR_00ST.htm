<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD><TITLE>Структура файла</TITLE>
<link rel="stylesheet" type="text/css" href="../../style/style.css">
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
</HEAD>
<BODY topMargin=0 >
<TABLE
style="BORDER-RIGHT: medium none; BORDER-TOP: medium none; BORDER-LEFT: medium none; BORDER-BOTTOM: #c0c0c0 1px solid"
height=121 cellSpacing=0 cellPadding=0 width=640>
  <TBODY>
  <TR>
    <TD vAlign=top><IMG
      src="img/ru/logo2.jpg" width="640" height="121" border=0 class="conthdr" ></TD>
</TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width=640 border=0>
  <TBODY>

  <TD width="100%" height="100%" vAlign=top>
   <DIV><IMG
      src="img/ru/old/SCM/articles.png" width="640" height="33"></DIV>


      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=3><IMG height=36
            src="img/ru/mtdl.png" width=5></TD>
          <TD vAlign=top
          background="mtdbg.png" class=ntitle>Структура файла </TD>
          <TD width=18><IMG height=36
            src="img/ru/mtdr.png"
      width=20></TD></TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5 background="ltd.gif"></TD>
          <TD vAlign=top class=news>
	<p class="news">Игровые скрипты заключены в файле <em>main.</em><em>scm</em>. Данный файл представляет собой нетипизированный бинарный  файл с определенной структурой. При декомпиляции получается исходный файл,  строение которого выстроено в точности по данной структуре.</p>
	Файл main.scm состоит  из следующих частей:<br>
	<ol>
	  <li><a href="#cont">заголовок</a></li>
	  <li><a href="#main">«майн»</a></li>
	  <li><a href="#missions">миссии</a></li>
	  </ol>
	<p>В San Andreas’е  часть игровых скриптов, однако, вынесена в отдельный файл <em>script.img</em>. Он состоит из набора небольших scm-файлов. Их отличие от главного main.scm заключается  в отсутствии заголовка. При декомпиляции эти скрипты добавляются в конец  исходника, составляя таким образом <a href="#ext_script">четвертую его часть</a>.</p>
	<p>Нас будет интересовать прежде всего строение текстового  исходника, поскольку работа с бинарным, скомпилированным файлом прерогатива  декомпилятора. Итак, какое строение должен иметь типичный исходник, чтобы быть  успешно скомпилированным в рабочий main.scm. </p>
	<p align="center"><strong><a name="cont">Заголовок</a></strong></p>
	<p>В самом верху исходного файла вы можете увидеть заголовок. Он представляет собой набор полей, определяющих часть структуры заголовка. Каждое  поле начинается со слова DEFINE.</p>
	<hr>
	<p>Первой частью заголовка является сегмент (или блок) моделей.  Он начинается со строки</p>
	<p>DEFINE OBJECTS <span class="general1-number">389</span></p>
	<p>Слово DEFINE указывает на то,  что эта строка – часть заголовка. OBJECTS указывает на то, что мы определяем  размер сегмента объектов, а точнее – число объектов, чьи названия будут указаны  ниже. <span class="general1-number">389</span> – число этих объектов (число может отличаться в разных исходниках).  Допустимые значения – положительные числа и ноль. Смотрите также <a href="SCMHELPGTALimit.htm">Лимиты объектов</a>.</p>
	<p>После этой строки перечисляются имена объектов.</p>
	<p>DEFINE OBJECT INFO                    <span class="general1-comment"> // Object number -1 </span></p>
	<p><a name="OBJECT"></a>Слово <strong>OBJECT</strong> указывает компилятору, что  данная строка содержит имя импортируемой модели. Особенностью данных моделей  является то, что они не требуют загрузки при использовании, а обращение к ним в  скрипте происходит не по их реальному ID, а по порядковому номеру, который указан в комментарии (<span class="general1-number">-1</span>).  Например,<br>
	<br>
	0213: <span class="general1-variable">$PICKUP_INFO_HOSPITAL</span> = create_pickup <span class="general1-model">#INFO</span> type<span class="general1-number">  3 </span>at<span class="general1-number"> 2027.77 -1420.52 16.49 </span><br>
	<br>или <br><br>
	  0213: <span class="general1-variable">$PICKUP_INFO_HOSPITAL</span> = create_pickup <span class="general1-number">-1</span> type <span class="general1-number">3</span> at<span class="general1-number"> 2027.77 -1420.52 16.49 </span></p>
	<p><em class="general1-model">INFO</em> – имя DFF-модели из gta3.img или другого архива.</p>
	<p>Самая первая модель в списке не используется игрой.</p>

      <p>Обратите внимание, что данный  сегмент заголовка опционален и не обязателен к указыванию. Если вы не укажете  какие модели следует компилировать как импортируемые, компилятор сделает это за  вас, когда будет обнаруживать использование имен моделей в скрипте, чьи имена  не содержатся в IDE-файлах  (модели из IDE-файлов  можно использовать по их ID,  не требуется указывать их в заголовке). См. также: <a href="SCMHELPGTASA18.htm">Объекты</a>.</p>
	  <hr>
	<a name="MISSION"></a><p>Второй частью заголовка является сегмент миссий. Он  начинается со строки</p>
	<p>DEFINE MISSIONS <span class="general1-number">135</span></p>
	<p>Здесь указывается, какое число миссий будет присутствовать в  данном исходнике. Компилятор будет искать именно заданное число миссий и если  их будет меньше или больше возникнет ошибка.</p>
	<p>После указания общего числа миссий следует перечисление  миссий:</p>
	<p>DEFINE MISSION <span class="general1-number">0</span> AT  <span class="general1-label">@INITIAL</span>          <span class="general1-comment"> // Initial 1 </span></p>
	<p>Разберем данную строку. После слова DEFINE стоит слово MISSION, указывающее что здесь определяется начало  миссии. После него стоит порядковый номер миссии. Этот номер используется в  опкоде start_mission.  После слова AT вы должны указать метку миссии, с которой она начнется.</p>
	<p>На этой строке может также стоять комментарий с названием  миссии из оригинального <em>main.scm</em>. Вы  можете отключить показ оригинальных имен миссий <a href="O_101.htm#mission">в опциях программы</a>.</p>
	<p>См. также:<br>
	  <a href="articles10.htm">Создание миссии. Часть 1</a><br>
	  <a href="articles11.htm">Создание миссии. Часть 2</a><br>
	    <a href="articles26.htm">Создание миссии. Часть 3</a><br>
	  <a href="articles25.htm">Создание миссии. Часть 4</a></p>
	<hr>
	<p>Указанные выше части заголовка являются общими для всех игр,  поддерживаемых Sanny Builder’ом.  Следующие части заголовка указываются только для игры San Andreas.</p>
	<p>DEFINE EXTERNAL_SCRIPTS <span class="general1-number">78</span> <span class="general1-comment">// Use -1 in order not to  compile AAA script </span></p>
	<p>В данной части заголовка определяются <a href="articles30.htm">внешние скрипты</a>.  После слова EXTERNAL_SCRIPTS указывается общее число  внешних скриптов. В исходном файле эти скрипты должны располагаться сразу после  всех миссий. Как и в случае с последними, компилятор будет искать заданное  количество скриптов.</p>
	<p>Обратите внимание, что внешние скрипты имеют в своем составе  особый скрипт с названием AAA.  Содержимое этого скрипта заполняется компилятором и делается это исключительно  с целью максимального соответствия оригинальным файлам игры. Если вы указываете  число EXTERNAL_SCRIPTS как <span class="general1-number">0</span>, скрипт AAA тем не менее  будет скомпилирован. Для того чтобы не делать этого, укажите в качестве значения число <span class="general1-number">-1</span>. Тогда script.img вообще  не будет создаваться.</p>
	<p>Версия 3.0 позволяет также перезаписать скрипт AAA. Для этого создайте свой собственный  скрипт и назовите его этим именем.</p>
	<p>Определение внешнего скрипта происходит в строке</p>
	<p>DEFINE SCRIPT PLAYER_PARACHUTE AT <span class="general1-label">@PLCHUTE</span> <span class="general1-comment">// 0 </span></p>
	<p>Здесь PLAYER_PARACHUTE – имя скрипта в файле script.img. <span class="general1-label">@PLCHUTE</span> – имя метки с которой  начинает тело скрипта.</p>
	<p>В комментарии указан порядковый номер скрипта, который  используется в опкодах, например:</p>
	<p>08A9: load_external_script <span class="general1-number">0</span> </p>
	<br>
	<p>После сегмента внешних скриптов идут еще два блока,  назначение которых неизвестно. Скорее всего игра не использует эти значения.</p>
	<p>DEFINE  UNKNOWN_EMPTY_SEGMENT <span class="general1-number">0</span></p>
	<p>DEFINE  UNKNOWN_THREADS_MEMORY <span class="general1-number">574</span></p>
	<br>
	<p>Если вы пользуетесь урезанным скриптом (stripped.txt) без миссий и скриптов, вы можете не  указывать заголовок совсем. </p>
	Шаблон заголовка можно вызывать в редакторе, <a href="features.htm#Macrorecorder">используя макрос</a> headsa или headvc.
	<p align="center"><strong><a name="main">Майн</a></strong></p>
	<p>Сразу после заголовка идет основной блок скрипта, именуемый майном.  Здесь находятся все потоки, которые создаются и работают во время игры. Начало  майна обозначено комментарием <span class="general1-comment">//-------------MAIN---------------.</span></p>
	<p>Майн состоит из набора отдельных потоков. Самым первым  потоком, который автоматически запускает игра, является поток MAIN (начинается  с опкода 03A4: name_thread <span class="general1-string">'MAIN'</span>).  Все остальные потоки активируются уже из данного потока опкодами 004F или 00D7 (обратите внимание, эти  опкоды по сути одинаковы, только 004F еще дополнительно может передавать в  создаваемый поток параметры). Замечание по поводу создания потоков из MAIN верно  только для новой игры. При загрузке сейва игра уже сама восстанавливает ранее  созданные потоки. </p>
	<p>Потоки состоят из опкодов, выражений и меток. Также при  компиляции в скрипте могут встречаться конструкции (<a href="variables.htm#VAR_END">VAR..END</a>, <a href="constants.htm">CONST..END</a>, <a href="loops.htm#FOR..END">FOR..END</a> и т.д.)  и <a href="directives.htm">директивы</a>, которые служат исключительно для удобства работы с кодом.  После компиляции эти конструкции так или иначе преобразуются в опкоды,  выражения или метки.</p>
	<p><strong>Опкод </strong>– (OpCode -  Operation Code - код операции) - число, обозначающее одну из инструкций для  парсера скриптов игры и указывающее на определенную последовательность  действий, которые необходимо выполнить с учетом переданных параметров. <br>
        <br>
	  Например, 0001 это код операции wait, которое указывает машине, что нужно  приостановить выполнение потока на число миллисекунд, переданных как параметр  этого опкода. Все опкоды хранятся в <a href="GTA_INI.htm">INI-файле</a>. <a name="EXPRESSION"></a></p>
	<p><strong>Выражение – </strong>это опкод  с математической или логической операцией. Например, </p>
	<div class="mycode5"><span class="general1-variable">$var</span> += <span class="general1-number">1</span><br>
	  <span class="general1-number">10</span> &lt; <span class="general1-variable">5@</span><br>
      <span class="general1-variable">&amp;10</span> = <span class="general1-number">0</span></div>
	<p>и т.д. Некоторые выражения могут писаться без указания номера опкода (как в примере выше). Логические выражения (условия) используются для проверки каких-либо значений.<a name="Lable"></a></p>
	<p><strong>Метка</strong> – это  идентификатор, обозначающий позицию в скрипте. Имя метки должно быть уникальным. По своей сути это число,  обозначающее смещение от начала майна или миссии до того места, где стоит  метка. В коде она обозначается символом :</p>
	<p class="general1-label">:MAIN_177</p>
	<p>Сами по себе метки бесполезны, если их не используют. Под  использованием метки понимается переход на нее в одном из специальных опкодов. Существуют  два вида перехода на метку: условное и безусловное.<br>
        <em>Безусловный переход</em> осуществляется опкодами<span class="general1-reservedword"> jump</span>,  <span class="general1-reservedword">gosub</span>.</p>
	<p><span class="general1-reservedword">jump</span>  <span class="general1-label">@MAIN_177 </span></p>
	<p>Обратите внимание, что имя метки для перехода обозначается  символом <span class="general1-variable">@</span> в начале. При <a href="O_103.htm#auto">включении автоматического списка</a>, редактор  будет выводить список используемых меток в коде. <br>
	  Когда игра достигнет этого опкода, она сразу перейдет на то  место в скрипте, где стоит метка (<span class="general1-label">:MAIN_177</span>). </p>
	<p>Отличительной особенностью команды gosub является то,  что после перехода на метку игра может (и должна) вернуться обратно после того,  как встретит команду return. </p>
	<div class="mycode5">…<br>
	  <span class="general1-reservedword">gosub</span> <span class="general1-label">@MAIN_177</span><br>
	  <span class="general1-variable">$var</span> += <span class="general1-number">1</span><br>
	  …<br>
	<br><span class="general1-label">:MAIN_177</span><br>
	  <span class="general1-variable">$var </span>= <span class="general1-number">1</span><br>
	  <span class="general1-reservedword">return </span></div>
	<p>Когда игра достигнет команды gosub, она сразу перейдет по указанной  метке на команду <span class="general1-variable">$var</span> = <span class="general1-number">1</span>. После выполнения этой команды,  она перейдет на команду return.  Смысл ее заключается в «вернуться-на-то-место-где-был-последний-gosub». В нашем примере это  будет команда <span class="general1-variable">$var</span> += <span class="general1-number">1</span>. Команды <span class="general1-reservedword">jump</span> (или <span class="general1-reservedword">goto</span>), <span class="general1-reservedword">gosub</span> и <span class="general1-reservedword">return</span> являются  базовыми понятиями в любом языке программирования.</p>
	<p><em>Условный переход </em>в  отличие от безусловного осуществляется только при определенном условии. Для  этого используется опкод jump_if_false (<span class="general1-reservedword">jf</span>). Он является составной частью любого  условия в скриптах.</p>
	<div class="mycode5">00D6: <span class="general1-reservedword">if </span><br>
	  08AB:    external_script <span class="general1-number">75</span>  loaded<br>
	  004D: jump_if_false<span class="general1-label"> @MAIN_4492</span><br>
	  0913:  run_external_script <span class="general1-number">75 </span></div>
	<p>В данном примере сначала проверяется загружен ли в память  внешний скрипт <span class="general1-number">75</span>. После опкода 08AB: состояние условия  будет либо правдивым (<span class="general1-reservedword">True</span>) либо ложным (<span class="general1-reservedword">False</span>), в зависимости от того, загружен  скрипт или нет. <br>
	  Состояние условия определяет два различных поведения игры  после проверки условия. <strong>Если условие  было правдивым (т.е. скрипт был загружен) игра пропустит опкод </strong><strong>jump_</strong><strong>if_</strong><strong>false. </strong>Следующим  шагом, таким образом, станет опкод 0913.<br>
  <strong>Если условие было ложным  (т.е. скрипт не был загружен) игра выполнит опкод jump_if_false и перейдет на метку </strong><span class="general1-label">@MAIN_4492</span><strong>.</strong><br>
	  Собственно из перевода слов jump_if_false  видно, что это <strong>переход, если ложь</strong>.</p>
	<p>См. также:<br>
        <a href="conditions.htm">Условия</a> , а также смотрите <a href="articles16.htm">здесь</a><br>
        <a href="articles27.htm">Переходы</a><br>
        <a href="articles22.htm">Таблицы переходов</a></p>
	<hr>
	<p>Майн заканчивается там, где начинаются  миссии.</p>
	<p align="center"><strong><a name="missions">Миссии</a></strong></p>
	<p>Блок миссий начинается с метки нулевой миссии из заголовка  (в оригинале <span class="general1-label">:INITIAL</span>). Обычно  там стоит комментарий <span class="general1-comment">//-------------Mission  0---------------</span>.</p>
	<p>Особенностью миссий является то, что в игре может  одновременно быть запущена только одна миссия. После команды <span class="general1-reservedword">start_mission</span> игра полностью загружает тело  миссии в отдельную область памяти, после чего начинает работать с ним как с  обычным потоком из майна. Все сказанное по поводу опкодов, выражений и меток в  майне действительно и для миссий. Миссия как и обычный поток заканчивается  командой <span class="general1-reservedword">end_thread</span>. </p>
	<p>Все миссии в исходном файле должны идти в той же  последовательности, что и в заголовке файла. Миссия должна идти одним блоком,  не допускается вложение части одной миссии в тело другой.</p>
	<hr><p align="center"><strong><a name="ext_script"></a>Внешние скрипты</strong></p>
	<p>Игра San Andreas также использует внешние скрипты, которые вставляются в  исходник сразу после всех миссий. Таким образом началом данного блока является конец  блока миссий. Там должна стоять метка первого внешнего скрипта (если таковые  используются). Обычно там стоит комментарий<br> <span class="general1-comment">//-------------External  script 0 (PLAYER_PARACHUTE)---------------</span>.</p>
	<p>Внешний скрипт представляет собой обычный поток со своими  опкодами, выражениями и метками. Этот поток загружается в отдельную область  памяти.</p>
	<p>См. также <a href="articles30.htm">Внешние скрипты</a>.</p>
	</TD>
          <TD width="5"
        background="rtd.gif"></TD>
      </TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5><IMG height=20
            src="img/ru/mtdlbot.png" width=5 border=0></TD>
          <TD align=left
            background="mtdbgbot.png"></TD>
          <TD class=ninfo align=right
          background="mtdbgbot.png">&nbsp;
            </TD>
          <TD width=5><IMG height=20
            src="img/ru/mtdrbot.png" width=5
        border=0></TD></TR></TBODY></TABLE></DIV>
<BR><BR></TD></TR><td width="100%"></TBODY></TABLE>
</TABLE></body></html>
