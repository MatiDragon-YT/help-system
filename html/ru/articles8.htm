<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD><TITLE>Quick Start. Часть 2</TITLE>
<link rel="stylesheet" type="text/css" href="../../style/style.css">
<META http-equiv=Content-Type content="text/html; charset=windows-1251">

</HEAD>
<BODY topMargin=0 >
<TABLE
style="BORDER-RIGHT: medium none; BORDER-TOP: medium none; BORDER-LEFT: medium none; BORDER-BOTTOM: #c0c0c0 1px solid"
height=121 cellSpacing=0 cellPadding=0 width=640>
  <TBODY>
  <TR>
    <TD vAlign=top width="100%"><IMG
      src="img/ru/logo2.jpg" width="640" height="121" border=0 class="conthdr" ></TD>
</TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width=640 border=0>
  <TBODY>

  <TD width="100%" height="100%" vAlign=top>
   <DIV><IMG
      src="img/ru/old/articles/articles.png" width="640" height="33"></DIV>


      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5><IMG height=36
            src="img/ru/mtdl.png" width=5></TD>
          <TD class=ntitle vAlign=top
          background="mtdbg.png" height=36> Quick Start. Часть 2</TD>
          <TD width=5><IMG height=36
            src="img/ru/mtdr.png"
      width=20></TD></TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5 background="ltd.gif"></TD>
          <TD class=news vAlign=top>
 Рассмотрим подробнее дополнительные нововведения в язык скриптов. <br>
 <br>
В <a href="articles7.htm">предыдущей статье </a> мы говорили о том, что все математические и арифметические выражения можно писать без опкодов. Это значительно удобнее и быстрее. Однако в компилятор Sanny встроены команды, позволяющие сократить даже простые выражения. <br>
<br>
1. Команда <span class="codes">Inc</span>. Эта команда представляет собой альтернативу обычному сложению. Она увеличивает значение первого параметра на число, переданное вторым параметром. Первым может стоять переменная (типа Integer или Float) или свойство класса <br>
<br>
<div class="mycode5">
<span class="general1-variable">$Var</span> += <span class="general1-number">10</span> <br>
Inc(<span class="general1-variable">$Var</span>, <span class="general1-number">10</span>) </div>
<br>
К переменной <span class="general1-variable">$Var</span> в обоих вариантах будет прибавлено <span class="general1-number">10</span>. <br>
Напомню, что если второе число целое (Integer), а переменная типа Float, то компилятор автоматически преобразует число в дробное. <br>

Данную команду удобно использовать, если вам нужно лишь прибавить единицу к переменной, поскольку второй параметр по умолчанию равен 1 <br>
<br>
<div class="mycode5">
<span class="general1-variable">$Var</span> += <span class="general1-number">1</span> <br>
Inc(<span class="general1-variable">$Var</span>) </div>
<br>
Оба варианта равнозначны. <br>
В качестве первого параметра может стоять свойство класса. Подробнее о них будет рассказано в отдельной статье, сейчас я лишь приведу пример: <br>
<br>
<div class="mycode5">
0109: player <span class="general1-variable">$PLAYER_CHAR</span> money += <span class="general1-number">1</span> <br>
<span class="general1-class">Player</span>.<span class="general1-command">Money</span>(<span class="general1-variable">$PLAYER_CHAR</span>) += <span class="general1-number">1</span> <br>
Inc(<span class="general1-class">Player</span>.<span class="general1-command">Money</span>(<span class="general1-variable">$PLAYER_CHAR</span>)) </div>
<br>
Все три варианта имеют одинаковое значение: количество денег игрока будет увеличено на единицу. <br>
2. Команда <span class="codes">Dec</span>. Это замена операции вычитания: <br>
<br>
<div class="mycode5">
<span class="general1-variable">$Var</span> -= <span class="general1-number">3</span> <br>
Dec(<span class="general1-variable">$Var</span>, <span class="general1-number">3</span>) </div>
<br>
На нее распространяются все написанное выше, за исключением примера со свойством. Дело в том, что свойство Money у игрока может только увеличиваться (опкод 0109). Опкода для вычитания денег нет. Поэтому выражение типа <span class="general1-class">Player</span>.<span class="general1-command">Money</span>(<span class="general1-variable">$PLAYER_CHAR</span><span class="var4">)</span> -= <span class="general1-number">1</span> работать не будет. Данное ограничение будет преодолено в следующих версиях SB.<br> <br>
3. Команда <span class="codes">Mul</span>. Операция умножения. Все тоже самое, за исключением того, что по умолчанию второй параметр равен 2: <br>
<br>
<div class="mycode5">
<span class="general1-variable">$Var</span> *= <span class="general1-number">2</span> <br>
Mul(<span class="general1-variable">$Var</span>) </div>
<br>
4. Заключительная арифметическая операция - деление. Для нее есть команда <span class="codes">Div</span>, которая без второго параметра делит переменную надвое: <br>
<br>
<div class="mycode5">
<span class="general1-variable">$Var </span>/= 2 <br>
Div(<span class="general1-variable">$Var</span>) </div>
<br>
Во всех четырех случаях вторым параметром может стоять переменная. Однако тогда типы обоих переменных должны быть определены в блоке var..end. <br><br>
5. Процедура <span class="codes">SQR</span> вычисляет квадрат переменной. Т.е. она является заменой операции умножения переменной саму на себя: <br>
<br>
<div class="mycode5">
<span class="general1-variable">$Var</span> *= <span class="general1-variable">$Var </span><br>
Sqr(<span class="general1-variable">$Var</span>) </div>
<br>
Тип переменной, как вы надеюсь поняли, должен быть известен компилятору. <br><br>
6. Функция <span class="codes">Random</span> возвращает случайное число в интервале между числами, переданными в качестве параметров. Она представляет собой замену сразу двух опкодов: <br>
<br>
<div class="mycode5">
0208: <span class="general1-variable">$Var</span> = random_float <span class="general1-number">10.0 100.0 </span><br>
0209: <span class="general1-variable">$Var</span> = random_int <span class="general1-number">10 100 </span></div>
<br>
Оба варианта могут быть представлены в виде <br>
<br>
<div class="mycode5">
<span class="general1-variable">$Var</span> = Random(<span class="general1-number">10</span>,<span class="general1-number"> 100</span>) </div>
<br>
Как видите, компилятор сам выбирает опкод в зависимости от типа переменной, в которую записывается результат функции (<span class="var3">$Var</span>). Если ее тип неизвестен, либо это не Integer или Float, компилятор сообщит об ошибке. <br>
В качестве параметров, конечно же, могут быть и переменные. Однако их тип не проверяется. <br>
Следующая команда будет, возможно, трудна для восприятия. Для этого необходимо представлять как в main.scm хранятся переменные и что такое DMA. Это выходит за рамки данной статьи, хотя возможно будет впоследствии описано. Итак, команда <span class="codes">Alloc</span>. Она устанавливает адрес памяти для переменной с символьным именем: <br>
<br>
<div class="mycode5">
Alloc(<span class="general1-variable">$PLAYER_CHAR</span>, <span class="general1-number">10</span>) </div>
<br>
Переменная<span class="var3">$PLAYER_CHAR</span> после этого будет компилироваться как <span class="var3">$10</span>. <br>
При помощи команды <span class="codes">Alloc</span> вы можете выстроить группу переменных в ряд, превратив их таким образом в элементы массива: <br>
<br>
<div class="mycode5">
Alloc(<span class="general1-variable">$Array</span>, <span class="general1-number">40</span>) <br>
Alloc(<span class="general1-variable">$Value2</span>, <span class="general1-number">41</span>) <br>
Alloc(<span class="general1-variable">$Value3</span>, <span class="general1-number">42</span>) <br>
Alloc(<span class="general1-variable">$Value4</span>, <span class="general1-number">43</span>) </div>
<br>
Эти переменные представляют теперь собой массив. Теперь вы можете использовать такой код: <br>
<br>
<div class="mycode5">Alloc(<span class="general1-variable">$Array</span>, <span class="general1-number">40</span>) <br>
Alloc(<span class="general1-variable">$Value2</span>, <span class="general1-number">41</span>) <br>
Alloc(<span class="general1-variable">$Value3</span>, <span class="general1-number">42</span>) <br>
Alloc(<span class="general1-variable">$Value4</span>, <span class="general1-number">43</span>)<br>
<span class="general1-reservedword">var</span> <br>
<span class="general1-variable">$Array</span>: array <span class="general1-number">4</span> of Integer <br>
<span class="general1-variable">$Result</span>: Int <br>
<span class="general1-reservedword">end </span><br>
<br>
<span class="general1-variable">$Value3</span> =<span class="general1-number"> 100</span> <span class="general1-comment">// в третий элемент массива записываем 100</span> <br>
<br>
<span class="general1-variable">$Index</span> =<span class="general1-number"> 2</span> <br>
<span class="general1-comment">//смещение от начала массива -&gt; $Value3, не забывайте, что счет идет от нуля </span><br>
<br>
<span class="general1-variable">$Result</span> = <span class="general1-variable">$Array</span>[<span class="general1-variable">$Index</span>]<br> <span class="general1-comment">// будет прочитана третья ячейка, начиная с первого элемента</span> <br>
<br>
<span class="general1-class">Player</span>.<span class="general1-command">Money</span>(<span class="general1-variable">$PLAYER_CHAR</span>) += <span class="general1-variable">$Result</span> <span class="general1-comment">// + 100 </span></div>
<br>
Конечно, здесь можно в качестве альтернативы использовать "чистый" DMA, т.е. цифровые имена переменных (<span class="var3">$40, $41, $42</span> и т.д.), но с символьными именами работать приятнее. <br>
Заключительная на сегодня возможность - это замена номеров миссий. Любая миссия запускается командой start_mission . Этот номер определяется в блоке DEFINE MISSION: <br>
<br>
<div class="mycode5">
DEFINE MISSIONS <span class="general1-number">135</span> <br>
DEFINE MISSION <span class="general1-number">0</span> AT <span class="general1-label">@INITIAL </span><br>
DEFINE MISSION <span class="general1-number">1</span> AT <span class="general1-label">@INITIL2</span> <br>
DEFINE MISSION <span class="general1-number">2</span> AT <span class="general1-label">@INTRO </span></div>
<br>
Однако запоминать эти номера не всегда удобно. Поэтому в SB была добавлена возможность заменить номер миссии на ее имя. Имя в данном случае - это имя метки, написанной в этом же блоке. Таким образом, для запуска 2-й миссии достаточно написать <br>
<br>
<div class="mycode5">
<span class="general1-reservedword">start_mission</span> intro </div>
<br>
Для пущего удобства в SB было встроено еще две возможности: <br>
1) <a href="O_101.htm#mission">замена всех номеров на имена при декомпиляции</a>.  <br>
2) можно вызвать список имен нажатием <span class="codes">Ctrl+Space</span>. Курсор должен стоять после команды start_mission. <br>            </TD>
          <TD width=5
        background="rtd.gif"></TD></TR>
        </TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5><IMG height=20
            src="img/ru/mtdlbot.png" width=5 border=0></TD>
          <TD align=left
            background="mtdbgbot.png"></TD>
          <TD class=ninfo align=right
          background="mtdbgbot.png">&nbsp;
            </TD>
          <TD width=5><IMG height=20
            src="img/ru/mtdrbot.png" width=5
        border=0></TD></TR></TBODY></TABLE></DIV>
<BR><BR></TD></TR><td width="100%"></TBODY></TABLE>
</TABLE></body></html>
