<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD><TITLE>Создание миссии. Часть 1</TITLE>
<link rel="stylesheet" type="text/css" href="../../style/style.css">
<META http-equiv=Content-Type content="text/html; charset=windows-1251">

</HEAD>
<BODY topMargin=0 >
<TABLE
style="BORDER-RIGHT: medium none; BORDER-TOP: medium none; BORDER-LEFT: medium none; BORDER-BOTTOM: #c0c0c0 1px solid"
height=121 cellSpacing=0 cellPadding=0 width=640>
  <TBODY>
  <TR>
    <TD vAlign=top width="100%"><IMG
      src="img/ru/logo2.jpg" width="640" height="121" border=0 class="conthdr" ></TD>
</TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width=640 border=0>
  <TBODY>

  <TD width="100%" height="100%" vAlign=top>
   <DIV><IMG
      src="img/ru/old/articles/articles.png" width="640" height="33"></DIV>


      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5><IMG height=36
            src="img/ru/mtdl.png" width=5></TD>
          <TD class=ntitle vAlign=top
          background="mtdbg.png" height=36> Создание миссии. Часть 1</TD>
          <TD width=5><IMG height=36
            src="img/ru/mtdr.png"
      width=20></TD></TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5 background="ltd.gif"></TD>
          <TD class=news vAlign=top>
 Думаю, многие из вас хотели бы создать свои миссии. В голове куча идей, но как это реализовать? В данном цикле статей мы, шаг за шагом, попробуем написать новую миссию. <br>
 <br>
Но, прежде чем начать, необходимо выяснить ряд отдельных моментов. Не имеет смысла писать скрипты, если вы не понимаете логики их работы. Поэтому сначала разберемся, как же собственно они работают. Сразу отмечу, что скрипты мы будем разбирать и писать на основе файла stripped.txt, который поставляется вместе с Sanny Builder. Ищите его в папке {SB}\Data\SA. <br>
<br>
<a name="DEFINE"></a>Теперь откройте данный файл и внимательно посмотрите на его содержимое. <br>
<br>
В самом верху вы увидите несколько строк, начинающихся со слова DEFINE <br>
<br>
<div class="mycode5">
DEFINE OBJECTS <span class="general1-number">0</span> <br>
DEFINE MISSIONS <span class="general1-number">0</span> <br>
DEFINE EXTERNAL_SCRIPTS <span class="general1-number">-1</span><span class="general1-comment"> // Use -1 to not write AAA script </span><br>
DEFINE UNKNOWN_EMPTY_SEGMENT <span class="general1-number">0 </span><br>
DEFINE UNKNOWN_THREADS_MEMORY <span class="general1-number">0</span> </div>
<br>
Это так называемый заголовок файла Main.SCM. Значения этих элементов напрямую отражают его <a href="ERR_00ST.htm">структуру и содержимое отдельных сегментов</a>. К описанию полей заголовка мы перейдем немного позже. <br>
Ниже заголовка вы увидите несколько закомментированных строк. Напомню, что они игнорируются компилятором, не играют никакой роли и необходимы лишь для ориентации в скриптах. <br>
<br>
<div class="mycode5">
<span class="general1-comment">// -------------------- <br>
// THE STRIPPED MAIN THREAD <br>
// contains initial info <br>
// -------------------- </span><br>
<span class="general1-reservedword">thread</span> <span class="general1-string">'MAIN'</span> <br>
<span class="general1-reservedword">var </span><br>
<span class="general1-variable">$PLAYER_CHAR</span>: Player <br>
<span class="general1-reservedword">end</span> <span class="general1-comment">// var </span><br>
01F0: set_max_wanted_level_to<span class="general1-number"> 6 </span><br>
<span class="general1-reservedword">set_wb_check_to</span> <span class="general1-number">0</span> </div>
<br>
Сразу после комментариев следуют первые скриптовые команды. Именно с этих строк и начинается игра. Т.е. при запуске, когда игра подгружает файл main.scm, движок игры начинает последовательно, строка за строкой выполнять скриптовые команды. <br>
Текущую активную команду потока, которая выполняется в данный момент, я бы назвал позицией невидимого курсора в данном потоке, по аналогии с текстовым редактором. <br>
После загрузки заголовка, первой командой, которую он выполнит, будет <span class="codes">thread</span> <span class="general1-string">'MAIN'</span>. И далее игра будет проходить все строки по порядку. Исключением станет ситуация, когда игра встретит переход (условный или безусловный). Например: <br>
<br>
<div class="mycode5">
<span class="general1-variable">$var</span> = <span class="general1-number">0 </span><br>
<span class="general1-reservedword">jump </span><span class="general1-label">@label </span><br>
<span class="general1-variable">$var</span> += <span class="general1-number">1</span> <br>
<br>
<span class="general1-label">:label</span> <br>
<span class="general1-variable">$var</span> -= <span class="general1-number">1 </span></div>
<br>
Допустим, выполнение скриптов привело игру к команде <span class="general1-variable">$var</span> = <span class="general1-number">0</span>. Следующей командой будет jump <span class="general1-label">@label</span>, а это значит, что игра пропустит все последующие строки и перейдет сразу на метку <span class="general1-label">@label</span>. Это называется безусловный переход. Таким образом, после этого игра выполнит команду <span class="general1-variable">$var</span> -= <span class="general1-number">1</span>. Значение переменной <span class="general1-variable">$var</span> станет <span class="general1-number">-1</span>. <br>
Существуют еще другие виды переходов, о них мы будет говорить отдельно. Сейчас важно понять логику работы скриптов. <br>
<br>
Вы можете задать вопрос, а как в игре работают сразу множество отдельных игровых блоков: одновременно работают парикмахерские, залы, можно запустить несколько разных миссий и т.д? Неужели игра обрабатывает эти скрипты последовательно друг за другом? Конечно же нет. Такая многозадачность обеспечивается тем, что движок игры способен выполнять параллельно несколько одновременно запущенных потоков (см. Вопрос #17 в MB FAQ). При этом каждый из этих потоков будет выполняться независимо от других. Значения локальных переменных одного потока будут недоступны в другом. <br>
<br>
Потоки можно сравнить с двумя (тремя..) одновременно запущенными проигрывателями. Представьте, что у вас запущено два WinAmp'а, в каждом из которых играет песня. Песни в данном случае играются параллельно, независимо друг от друга. Так же работают и потоки. <br>
Потоки запускаются командой create_thread. Это еще один вид безусловного перехода. Однако его отличие от <span class="codes">jump</span> состоит в том, что игра продолжает выполнять последующие команды. Поэтому довольно часто встречается такая ошибка: <br>
<br>
<div class="mycode5">
<span class="general1-reservedword">create_thread</span> <span class="general1-label">@CreateCar</span> <br>
<br>
<span class="general1-label">:CreateCar </span><br>
<span class="general1-comment">&lt;создаем машину&gt;</span> <br>
<span class="general1-reservedword">end_thread</span> </div>
<br>
После того как игра создала поток <span class="general1-label">CreateCar</span>, появится еще один невидимый "курсор", установленный на позицию метки <span class="general1-label">CreateCar</span>. При этом первый поток будет продолжать последовательно выполняться (потоки же работают параллельно). Получится такая ситуация, когда на одну и ту же команду придут два потока одновременно. В данном примере дважды будет выполняться блок создания машины. Вот почему часто встречаются сообщения неопытных скриптеров о проблеме двух создаваемых актеров, машин. <br>
Чтобы не допустить такой ситуации, достаточно вставить безусловный переход на метку, которая будет лежать за пределами нового потока: <br>
<br>
<div class="mycode5">
<span class="general1-reservedword">create_thread</span> <span class="general1-label">@CreateCar </span><br>
<span class="general1-reservedword">jump</span> <span class="general1-label">@SkipThread</span> <br>
<br>
<span class="general1-label">:CreateCar</span> <br>
<span class="general1-comment">&lt;создаем машину&gt;</span> <br>
<span class="general1-reservedword">end_thread</span> <br>
<br>
<span class="general1-label">:SkipThread </span></div>
<br>
Если первый поток вам больше не нужен, его можно совсем завершить: <br>
<br>
<div class="mycode5">
<span class="general1-reservedword">create_thread</span> <span class="general1-label">@CreateCar </span><br>
<span class="general1-reservedword">end_thread</span> <br>
<br>
<span class="general1-label">:CreateCar </span><br>
<span class="general1-comment">&lt;создаем машину&gt;</span> <br>
<span class="general1-reservedword">end_thread </span></div>
<br>
Команда <span class="codes">end_thread</span> моментально останавливает выполнение потока. Игра забывает позицию "курсора" в этом потоке. Однако если он вам понадобится, можно заново запустить его: <br>
<br>
<div class="mycode5">
<span class="general1-label">:Thread_1 </span><br>
<span class="general1-reservedword">create_thread</span> <span class="general1-label">@CreateCar</span> <br>
<span class="general1-reservedword">end_thread </span><br>
<br>
<span class="general1-label">:CreateCar </span><br>
<span class="general1-comment">&lt;создаем машину&gt;</span> <br>
<span class="general1-reservedword">wait</span> <span class="general1-number">10000</span> <br>
<span class="general1-reservedword">create_thread</span> <span class="general1-label">@Thread_1</span> <br>
<span class="general1-reservedword">end_thread </span></div>
<br>
Надеюсь, вы понимаете логику работы данного скрипта. Игра пришла на метку <span class="general1-label">Thread_1</span> и выполнила команду <span class="codes">create_thread</span> <span class="general1-label">@CreateCar</span>. Теперь в памяти игры будет два одновременно работающих потока (Thread_1 и CreateCar). <br>
Первый после это завершится командой end_thread, а второй продолжит работу. В нем будет создана машина, после чего игра выполнит команду <span class="general1-reservedword">wait</span> <span class="general1-number">10000</span>. После задержки в 10 секунд, игра опять создаст новый (старый :)) поток <span class="general1-label">Thread_1</span>, а второй поток завершится. <br>
Таким образом в игре каждые 10 секунд будет создаваться машина. <br>
Потоки можно создавать не только с первой метки. Иногда существует необходимость запуска с определенной позиции: <br>
<br>
<div class="mycode5">
... <br>
<span class="general1-label">:Thread_1 </span><br>
<span class="general1-reservedword">end_thread </span><br>
<br>
<span class="general1-label">:CreateCar </span><br>
<span class="general1-comment">&lt;создаем машину&gt;</span> <br>
<br>
<span class="general1-label">:CreateActor </span><br>
<span class="general1-comment">&lt;создаем актера&gt;</span> <br>
<br>
<span class="general1-reservedword">jump</span> <span class="general1-label">@Thread_1 </span><br>
... <br>
<br>
... <br>
<span class="general1-reservedword">create_thread</span> <span class="general1-label">@CreateCar</span> <br>
<br>
... <br>
<span class="general1-reservedword">create_thread</span> <span class="general1-label">@CreateActor</span> </div>
<br>
Когда игра придет на команду <span class="codes">end_thread</span>, она завершит какой-то вышележащий поток. Машина и актер, естественно, создаваться не будут. Однако мы может создавать их запуском "субпотока". После <span class="codes">create_thread</span> <span class="general1-label">@CreateCar</span> игра создаст и машину и актера. Сам поток после перехода завершится. <br>
Почему? - спросите вы, - ведь команда завершения лежит за пределами потока (выше). После перехода <span class="codes">jump</span> <span class="general1-label">@Thread_1</span> позиция "курсора" (т.е. текущая выполняемая команда в потоке) переместится на команду end_thread. Игра завершит именно тот поток, который дошел сюда. Это означает, что в скриптах может быть всего одна-единственная команда <span class="codes">end_thread</span>. Остальные потоки могут заканчиваться переходом на нее. <br>
Запуском "субпотока" <span class="general1-label">@CreateActor</span> можно добиться того, что будет создан только актер, без машины. <br>
<br>
Итак, вернемся к нашему файлу. Как видите, в нем нет команд <span class="codes">create_thread</span>. Значит будет запущен только один поток, автоматически создаваемый в начале новой игры. В конце файла вы увидите команду завершения. Это значит, что после нее в игре не будет запущено вообще ни одного потока, т.е. выполнение файла main.scm прекратится. Такое в принципе позволительно для урезанного майна. <br>
<br>
Говоря о запущенных потоках, стоит сказать, что их текущее состояние запоминается после сохранения. Т.е. при загрузке старой игры, все потоки продолжат выполнение с того момента, где они были в момент сохранения. А это значит, что первые команды майна (<span class="codes">thread</span> <span class="general1-string">'MAIN'</span> и далее) выполняются лишь единожды, при запуске новой игры. Именно поэтому в начале помещаются все одноразовые действия, такие как создание игрока, указание стартовых значений переменных и т.п. После этого первый поток либо переходит в бесконечный цикл (например проверка текущего процента прохождения), либо завершается (как в указанном файле). <br>
<br>
Между командами<span class="codes"> thread</span> <span class="general1-string">'MAIN'</span> и end_thread в stripped.txt написаны опкоды, смысл которых, думаю, должен быть вам ясен. Их назначение состоит в том, чтобы создать в игре жизненно необходимые объекты и установить важные стартовые значения. <br>
<br>
Таково поле наших будущих действий. В следующей статье мы рассмотрим понятие триггера и макета миссии. <br>            </TD>
          <TD width=5
        background="rtd.gif"></TD></TR>
        </TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5><IMG height=20
            src="img/ru/mtdlbot.png" width=5 border=0></TD>
          <TD align=left
            background="mtdbgbot.png"></TD>
          <TD class=ninfo align=right
          background="mtdbgbot.png">&nbsp;
            </TD>
          <TD width=5><IMG height=20
            src="img/ru/mtdrbot.png" width=5
        border=0></TD></TR></TBODY></TABLE></DIV>
<BR><BR></TD></TR><td width="100%"></TBODY></TABLE>
</TABLE></body></html>
