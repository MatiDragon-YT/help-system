<!DOCTYPE HTML>
<html>
<head>
<title>HEX..END</title>
    <meta charset="utf-8">
<link rel="stylesheet" type="text/css" href="../../style/style2.css">
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
</head><body>

<h2>HEX..END</h2>
<p>Sanny Builder поддерживает прямую запись данных в выходной файл. Все значения внутри этой конструкции записываются без какой-либо обработки и проверки.</p>
<p class='note'>Используйте эту возможность только в том случае, если вы знаете, что делаете. Любые ошибки могут повредить файл и его невозможно будет прочитать в игре или в скриптовом редакторе.</p>
<p class='syntax'>Синтаксис:<br>
    <span class="reservedword">hex</span><br>
    &lt;любый шестнадцатиричные значения&gt;<br>
    <span class="reservedword">end</span><br>
</p>
<p>Пример:</p><pre>
<span class="reservedword">hex</span>
<span class="number">04 00 02 0800 04 01</span>
<span class="reservedword">end</span></pre></p>

<p>Эта последовательность байтов представляет собой скомпилированный опкод 0004: $2 = 1, поэтому игра корректно прочитает его и установит значение переменной $2 равным 1.

<p class='note'>Вы должны использовать 2 цифры в шестнадцатиричном формате для каждого байта, который собираетесь записать в файл. Все пробелы игнорируются. Компилятор рассматривает две подряд идущих цифры с пробелом между ними как одиночный байт. К одиночной цифре (0..F) слева дописывается 0. Например, <span class="number">A B C</span> будет записано как число 0xAB0C.</p>

<p>В конструкции HEX..END также можно использовать строки, метки, глобальные переменные, имена моделей. Они компилируются без предшествующего байта, указывающего на тип данных.</p>
<p><pre><span class="label">:get_offset</span>
<span class="reservedword">hex</span>
<span class="number">04 00 02 </span><span class="variable">$PLAYER_CHAR</span><span class="number"> 01 </span><span class="label">@get_offset</span>
<span class="reservedword">end</span></pre></p>
<p>Это точная копия опкода 0004: <span class="variable">$PLAYER_CHAR</span> = <span class="label">@get_offset</span></p>

<p>Строки компилируются как последовательность символов, заключенных между двойными кавычками.</p>
<p><pre><span class="reservedword">hex</span>
<span class="string">"This is a string"</span>
<span class="reservedword">end</span></pre></p>
<p>В строках допускается использование следующих управляющих символов:</p>
<ul>
    <li>\0 - пустой символ - 0</li>
    <li>\b - возврат на шаг - 8</li>
    <li>\t - табуляция - 9</li>
    <li>\n - перевод строки - 10</li>
    <li>\r - возврат каретки - 13</li>
    <li>\x&lt;nn&gt; - любой байт - nn</li>
    <li>\&lt;char&gt; - любой символ - &lt;char&gt;</li>
</ul>
<p>Пример:</p>
<pre><span class="reservedword">hex</span>
<span class="string">"\0\b\t\n\r\xDD"</span>
<span class="reservedword">end</span></pre></p>
Это даст следующую последовательность байтов: <span class='number'>00 08 09 0A 0D DD</span>.
<p class='note'>В настоящее время несколько подряд идущих пробелов в строке конвертируются в один пробел. Например, строка "This&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string" будет сконвертирована в "This is a string". Используйте символ \ чтобы добавить дополнительные пробелы в строку: <span class="string">"This \ \ \ is \ a \ \ \ \ string".</span></p>
<p>Также вы можете использовать тип данных aDMA, чтобы записать число в выходной файл. Число после знака &amp; может быть как положительным, так и отрицательным, в десятичном формате или шестнадцатиричном.</p>
<p><pre><span class="reservedword">hex</span>
<span class="variable">&1000</span> <span class="variable">&</span><span class="number">-0xA33500</span>
<span class="reservedword">end</span></pre></p>
Этот пример даст следующую последовательность байтов: <span class='number'>E8 03 00 CB 5C FF</span>.
</body></html>
