<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD><TITLE>CLEO 3: opcodes</TITLE>
<link rel="stylesheet" type="text/css" href="style/style.css">
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
</HEAD>
<BODY topMargin=0 >
<TABLE
style="BORDER-RIGHT: medium none; BORDER-TOP: medium none; BORDER-LEFT: medium none; BORDER-BOTTOM: #c0c0c0 1px solid"
height=121 cellSpacing=0 cellPadding=0 width=640>
  <TBODY>
  <TR>
    <TD vAlign=top><IMG
      src="img/en/logo2.jpg" width="640" height="121" border=0 class="conthdr" ></TD>
</TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width=640 border=0>
  <TBODY>

  <TD width="100%" height="100%" vAlign=top>
   <DIV><IMG
      src="img/en/old/CLEO/articles.png" width="640" height="33"></DIV>


      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=3><IMG height=36
            src="img/en/mtdl.png" width=5></TD>
          <TD width="571" height=36 vAlign=top
          background="mtdbg.png" class=ntitle><p>CLEO 3: opcodes </p></TD>
      <TD width=18><IMG height=36
            src="img/en/mtdr.png"
      width=20></TD></TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="640">
        <TBODY>
        <TR>
          <TD width=5 background="ltd.gif"></TD>
          <TD width="600" vAlign=top class=news><p>The using of the  following opcodes is only possible at the CLEO 3 library installed. At  compiling Sanny Builder checks if the library is installed and if not, warns  that it’s necessary. If you write a script using these opcodes, you have to  include the library files as well to guarantee its functionality to the end  user</p>
            <table width="490" align="center" cellpadding="0" cellspacing="0" class="link">
              <tr>
                <td width="120"><a href="#0A8C" title="0A8C: write_memory 0xC0BC15 size 1 value 1 virtual_protect 0">Opcode 0A8C</a></td>
                <td width="120"><a href="#0A99" title="0A99: chdir 0">Opcode 0A99</a></td>
                <td width="120"><a href="#0AA6" title="0AA6: call_method $Destroy struct $CarStruct params 0 pop 0">Opcode 0AA6</a></td>
                <td width="120"><a href="#0AB3" title="0AB3: var 0 = 10">Opcode 0AB3</a></td>
              </tr>
              <tr>
                <td><a href="#0A8D" title="0A8D: $result = read_memory 1@ size 4 virtual_protect 0">Opcode 0A8D</a></td>
                <td width="120"><a href="#0A9A" title="0A9A: $hFILE = openfile "settings.ini" mode 0x72">Opcode 0A9A</a></td>
                <td width="120"><a href="#0AA7" title="0AA7: call_function 0x569660 num_params 2 pop 2  $COORD_X $COORD_Y $GROUND">Opcode 0AA7</a></td>
                <td><a href="#0AB4" title="0AB4: 0@= var 0">Opcode 0AB4</a></td>
              </tr>
              <tr>
                <td><a href="#0A8E" title="0A8E: 4@ = 5@ + 6@">Opcode 0A8E</a></td>
                <td width="120"><a href="#0A9B" title="0A9B: closefile $hFILE">Opcode 0A9B</a></td>
                <td width="120"><a href="#0AA8" title="0AA8: call_function_method 0x4048E0 struct 0xB74494  num_params 1 pop 0 $MyCar 0@">Opcode 0AA8</a></td>
                <td width="120"><a href="#0AB5" title="0AB5:  store_actor $PLAYER_ACTOR closest_vehicle_to 0@ closest_ped_to 1@">Opcode 0AB5</a></td>
              </tr>
              <tr>
                <td><a href="#0A8F" title="0A8F: $var = 0@(1@,2i) - 1">Opcode 0A8F</a></td>
                <td width="120"><a href="#0A9C" title="0A9C: 0@ = file $hFILE size">Opcode 0A9C</a></td>
                <td><a href="#0AA9" title="0AA9: is_game_version_original">Opcode 0AA9</a></td>
                <td width="120"><a href="#0AB6" title="0AB6: store_target_marker_coords_to 0@ 1@ 2@">Opcode 0AB6</a></td>
              </tr>
              <tr>
                <td><a href="#0A90" title="0A90: $var(0@,10i) = 100 * 1@">Opcode 0A90</a></td>
                <td width="120"><a href="#0A9D" title="0A9D: readfile $hFILE size 2 to $150">Opcode 0A9D</a></td>
                <td width="120"><a href="#0AAA" title="0AAA: 0@ = thread 'OTB' pointer">Opcode 0AAA</a><a href="#0AAC"></a></td>
                <td width="120"><a href="#0AB7" title="0AB7: get_vehicle $CAR number_of_gears_to 10@">Opcode 0AB7</a></td>
              </tr>
              <tr>
                <td><a href="#0A91" title="0A91: $div = 1 / 5">Opcode 0A91</a></td>
                <td width="120"><a href="#0A9E" title="0A9E: writefile $hFILE size 128 from 0@">Opcode 0A9E</a></td>
                <td width="120"><a href="#0AAB" title="0AAB:  file_exists "CLEO\version.dll"">Opcode 0AAB</a><a href="#0AAC"></a></td>
                <td width="120"><a href="#0AB8" title="0AB8: get_vehicle $CAR current_gear_to 11@">Opcode 0AB8</a></td>
              </tr>
              <tr>
                <td><a href="#0A92" title="0A92: create_custom_thread "ShowTextBox.s"">Opcode 0A92</a></td>
                <td><a href="#0A9F" title="0A9F: 0@ = current_thread_pointer">Opcode 0A9F</a></td>
                <td><a href="#0AAC" title="0AAC: $hMP3 = load_mp3 "CLEO\playlist\01.mp3"">Opcode 0AAC</a></td>
                <td><a href="#0AB9" title="0AB9: get_mp3 $hMP3 state_to 7@">Opcode 0AB9</a></td>
              </tr>
              <tr>
                <td><a href="#0A93" title="0A93: end_custom_thread">Opcode 0A93</a></td>
                <td width="120"><a href="#0AA0" title="0AA0: gosub_if_false @CREATE_NEW_ACTOR">Opcode 0AA0</a><a href="#0AA1"></a></td>
                <td width="120"><a href="#0AAD" title="0AAD: set_mp3 $hMP3 perform_action 1">Opcode 0AAD</a><a href="#0AAE"></a></td>
                <td><a href="#0ABA" title="0ABA: end_custom_thread_named 'BENZIN'">Opcode 0ABA</a></td>
              </tr>
              <tr>
                <td><a href="#0A94" title="0A94: start_custom_mission "missions\CustomMission1"">Opcode 0A94</a></td>
                <td><a href="#0AA1" title="0AA1: return_if_false">Opcode 0AA1</a></td>
                <td width="120"><a href="#0AAE" title="0AAE: release_mp3 $hMP3">Opcode 0AAE</a></td>
                <td width="120"><a href="#0ABD" title="0ABD: vehicle 0@ siren_on">Opcode 0ABD</a></td>
              </tr>
              <tr>
                <td><a href="#0A95" title="0A95: enable_thread_saving">Opcode 0A95</a></td>
                <td width="120"><a href="#0AA2" title="0AA2: $hLIB = load_library "CLEO\version.dll"">Opcode 0AA2</a></td>
                <td width="120"><a href="#0AAF" title="0AAF: 0@ = get_mp3_length $hMP3">Opcode 0AAF</a></td>
                <td><a href="#0ABE" title="0ABE: vehicle 0@ engine_on">Opcode 0ABE</a></td>
              </tr>
              <tr>
                <td><a href="#0A96" title="0A96: $ActorStruct = actor $PLAYER_ACTOR struct">Opcode 0A96</a><a href="#0A95"></a></td>
                <td width="120"><a href="#0AA3" title="0AA3: free_library $hLIB">Opcode 0AA3</a></td>
                <td width="120"><a href="#0AB0" title="0AB0:  key_pressed 0x73">Opcode 0AB0</a></td>
                <td><a href="#0ABF" title="0ABF: set_vehicle 0@ engine_state_to 0">Opcode 0ABF</a></td>
              </tr>
              <tr>
                <td width="120"><a href="#0A97" title="0A97: $CarStruct = car $MyCar struct">Opcode 0A97</a><br></td>
                <td width="120"><a href="#0AA4" title="0AA4: $hPROC = get_proc_address "GetVersion" library $hLIB">Opcode 0AA4</a></td>
                <td width="120"><a href="#0AB1" title="0AB1: call_scm_func @GetSQR 1  10 $result">Opcode 0AB1</a></td>
                <td width="120"></td>
              </tr>
              <tr>
                <td><a href="#0A98" title="0A98: $ObjectStruct = object 0@ struct">Opcode 0A98</a></td>
                <td width="120"><a href="#0AA5" title="0AA5: call $hPROC num_params 1 pop 1 $param">Opcode 0AA5</a></td>
                <td width="120"><a href="#0AB2" title="0AB2: ret 1 0@">Opcode 0AB2</a></td>
                <td width="120"></td>
              </tr>
            </table>
            <br>
            <div class="marg" >CLEO 2  Opcodes</div>
            <br>
           <a name="0A8C"></a>
            <div class="mycode5">0A8C: write_memory <span class="general1-number">0xC0BC15</span> size <span class="general1-number">1 </span>value <span class="general1-number">1</span> virtual_protect <span class="general1-number">0</span></div>
            <p> 0A8C writes a value  to the game memory.<br><br>
              <strong>Parameters:</strong><br>
              1 – memory address (any integer  value) <br>
2 – number of bytes to write: 1, 2 or 4 bytes<br>
3 – value to write (any number)<br>
4 – Virtual Protect: use 1 to write to the read-only address, 0 – if the address  is rewritable.</p>
            <hr> <br><a name="0A8D"></a>
            <div class="mycode5">0A8D: <span class="general1-variable">$result</span> = read_memory <span class="general1-variable">1@ </span>size <span class="general1-number">4</span>  virtual_protect <span class="general1-number">0</span></div>
            <p>0A8D reads the game  memory and stores the result to a variable.<br><br>
              <strong>Parameters:</strong><br>
1 – variable to store read result (any variable or array item)<br>
2 – memory addressà to  read (any integer value)<br>
3 – number of bytes to read: 1, 2 or 4 bytes<br>
4 – Virtual Protect: use 1 if the address is unreadable, 0 – if address is  readable.</p>
           <hr> <br><a name="0A8E"></a>
            <div class="mycode5">0A8E: <span class="general1-variable">4@</span> = <span class="general1-variable">5@ </span>+ <span class="general1-variable">6@</span> <span class="general1-comment">// int</span> </div>
            <p>0A8E sums up two values and  stores the result to a variable.<br><br>
              <strong>Parameters:</strong><br>
1 – variable to store sum (any variable or array item)<br>
2 – first item (any integer value)<br>
3 – second item (any integer value)</p>
           <hr> <br><a name="0A8F"></a>
            <div class="mycode5">0A8F: <span class="general1-variable">$var</span> = <span class="general1-variable">0@</span>(<span class="general1-variable">1@</span>,<span class="general1-number">2i</span>) - <span class="general1-number">1</span> <span class="general1-comment">// int</span> </div>
            <p>0A8F subtracts one integer  value from another and stores the result to a variable.<br>
             <br> <strong>Parameters:</strong><br>
1 – variable to store difference (any variable or array item)<br>
2 – minuend (any integer value)<br>
3 – subtrahend (any integer value)</p>
            <hr> <br><a name="0A90"></a>
            <div class="mycode5">0A90: <span class="general1-variable">$var</span>(<span class="general1-variable">0@</span>,<span class="general1-number">10i</span>) = <span class="general1-number">100</span> * <span class="general1-variable">1@</span> <span class="general1-comment">// int </span></div>
            <p>0A90 multiplies one  integer number by another and stores the result to a variable.<br>
           <br>   <strong>Parameters:</strong><br>
1 – variable to store product (any variable or array item)<br>
2 – multiplier (any integer value)<br>
3 – multiplier (any integer value)</p>
            <hr> <br><a name="0A91"></a>
            <div class="mycode5">0A91: <span class="general1-variable">$div</span> = <span class="general1-number">1</span> / <span class="general1-number">5</span> <span class="general1-comment">// int</span></div>
            <p>0A91 divides one integer  number by another and stores the result to a variable without the remainder.<br><br>
              <strong>Parameters:</strong><br>
1 – variable to store result (any variable or array item)<br>
2 – dividend (any integer value)<br>
3 – divisor (any integer value)</p>
         <hr> <br><a name="0A96"></a>
            <div class="mycode5">0A96: <span class="general1-variable">$ActorStruct </span>= actor <span class="general1-variable">$PLAYER_ACTOR</span> struct</div>
            <p>0A96 stores the pointer to the actor’s structure in the game memory. The  structure is a set of different values such as health, coords, etc. Knowing the  struct address it’s possible to read/rewrite these values using 0A8D/0A8C.</p>
            <strong>Parameters:</strong><br>
1 – variable to store the struct address <br>
2 – actor handle obtained by the constructor opcode (009A and similar)
<hr> <br><a name="0A97"></a>
            <div class="mycode5">0A97: <span class="general1-variable">$CarStruct</span> = car <span class="general1-variable">$MyCar</span> struct</div>
            <p>0A97 stores the pointer to  the vehicle’s structure in the game memory.<br><br>
              <strong>Parameters:</strong><br>
1 – variable to store the struct address <br>
2 – vehicle handle obtained by the constructor opcode (00A5 and similar)</p>
           <hr> <br><a name="0A98"></a>
            <div class="mycode5">0A98: <span class="general1-variable">$ObjectStruct</span> = object <span class="general1-variable">0@</span> struct</div>
            <p>0A98 stores the pointer to  the object’s structure in the game memory.<br><br>
              <strong>Parameters:</strong><br>
1 – variable to store the struct address <br>
2 – object handle obtained by the constructor opcode (0107 and similar)</p>
            <hr> <br><a name="0A99"></a>
            <div class="mycode5">0A99: chdir <span class="general1-number">0</span></div>
            <p>0A99 sets the current directory  making it default.<br><br>
              <strong>Parameter:</strong><br>
0 – the game root folder becomes the default directory<br>
1 – the user files folder becomes the default directory</p>
           <hr> <br><a name="0A9A"></a>
            <div class="mycode5">0A9A: <span class="general1-variable">$hFILE</span> = openfile<span class="general1-string"> &quot;settings.ini&quot;</span> mode <span class="general1-number">0x72</span>   <span class="general1-comment">// IF and SET</span></div>
            <p>0A9A opens the file for reading and writing. This opcode can be used as  a condition: if the file is was not open, it returns False, otherwise True.<br><br>
              <strong>Parameters:</strong><br>
1 – variable to store the file handle<br>
            2 – file name. If the path is relative, the file is  open in accordance with the current directory (opcode 0A99).<br>
3 – file open mode: <br>
0x6272 – opens binary file for reading<br>
0x72 – opens text file for reading<br>
0x6277 – opens binary file for writing<br>
0x77 – opens text file for reading</p>
<hr> <br><a name="0A9B"></a>
            <div class="mycode5">0A9B: closefile <span class="general1-variable">$hFILE</span></div>
            <p>0A9B closes the file and  frees the memory.</p>
             <strong>Parameter:</strong> a handle to the file
             <hr> <br><a name="0A9C"></a>
            <div class="mycode5">0A9C: <span class="general1-variable">0@</span> = file <span class="general1-variable">$hFILE</span> size </div>
            <p>0A9C stores the file  size in bytes to a variable.<br><br>
              <strong>Parameters:</strong><br>
1 – variable to store the result<br>
2 – file handle</p>
           <hr> <br><a name="0A9D"></a>
            <div class="mycode5">0A9D: readfile <span class="general1-variable">$hFILE</span> size <span class="general1-number">2</span> to <span class="general1-variable">$150</span></div>
            <p>0A9D reads the specified  number of bytes from the opened file and writes them to the memory region  starting from the address where the variable is. <br><br>
              <strong>Parameters:</strong><br>
1 – file handle<br>
2 – number of bytes to read from the file <br>
3 – variable to store the result. If the number of delivered bytes is more than  four, the remainder will be written to the next variable ($151 in this case),  and so on.</p>
           <hr> <br><a name="0A9E"></a>
            <div class="mycode5">0A9E: writefile <span class="general1-variable">$hFILE</span> size <span class="general1-number">128</span> from <span class="general1-variable">0@</span></div>
            <p>0A9E copies data starting  from the address, where the variable (last parameter) is, to the file.</p>
            <strong>Parameters:</strong><br>
1 – file handle <br>
2 – number of bytes to copy <br>
3 – variable indicated the starting position of writing data. If the data size  is more than 4 bytes, next variable’s value will be read and written to the  file. In this example, the file will keep the dump of all local variables of a  thread (32 variables with 4 bytes in length for each = 128 bytes to copy).
<hr> <br><a name="0A9F"></a>
            <div class="mycode5">0A9F: <span class="general1-variable">0@</span> = current_thread_pointer</div>
            <p>0A9F stores the current  thread pointer to a variable. Knowing this pointer it’s possible to work  directly with any thread fields such as thread name, its local variables, base  IP, etc.</p>
            <hr> <br><a name="0AA0"></a>
            <div class="mycode5">0AA0: gosub_if_false <span class="general1-label">@CREATE_NEW_ACTOR</span></div>
            <p>0AA0 executes a gosub  command if the condition result is false. Except this difference, this opcode  is the same as 004D: jump_if_false and can be used instead of it.<br><br>
              <strong>Parameter:</strong> label where the thread is  transfered</p>
            <hr> <br><a name="0AA1"></a>
            <div class="mycode5">0AA1: return_if_false</div>
            <p>0AA1 executes a return  if the condition result is false. This one is similar to the 004D and can be  used instead of.</p>
            <hr> <br><a name="0AA2"></a>
            <div class="mycode5">0AA2: <span class="general1-variable">$hLIB</span> = load_library <span class="general1-string">&quot;CLEO\version.dll&quot;</span> <span class="general1-comment">//  IF and SET</span></div>
            <p>0AA2 loads a DLL library and stores the handle to it to a varaible. This  opcode can be used as a condition: if the library does not loaded, it returns  False, otherwise it’s True.</p>
            <strong>Parameters:</strong><br>
1 – variable to store the handle to a library (any variable or array item)<br>
2 – a library name. If the path is relative (without specifying of a disk name),  the DLL file is searched relatively of the current active directory (opcode  0A99). If the file extension is not specified, the default extension will be  used (.DLL).
<hr> <br><a name="0AA3"></a>
            <div class="mycode5">0AA3: free_library  <span class="general1-variable">$hLIB</span></div>
            <p>0AA3 unloads the library  and frees the memory. <br><br>
              <strong>Parameter:</strong> handle to the library</p>
           <hr> <br><a name="0AA4"></a>
            <div class="mycode5">0AA4: <span class="general1-variable">$hPROC</span> = get_proc_address <span class="general1-string">&quot;GetVersion&quot;</span>  library <span class="general1-variable">$hLIB</span> <span class="general1-comment">// IF and SET</span></div>
            <p>0AA4 returns the address  of the specified exported DLL function. This address can be used in the opcodes  of the call type. This opcode can be used as a condition: if the function is  not found it return False, otherwise it’s True. <br><br>
              <strong>Parameters:</strong><br>
1 – variable to store the function address.<br>
2 – function name (a string or a string variable). Pay attention that the get_proc_address  is sensitive to the letter case.  If the  function is exported having the name GetVersion, it means that, for example, get_proc_address  “getversion” will not find such a function. You must specify exact name. Also  remember that Sanny Builder compiles all strings in uppercase by default. It  means that this example will be compiled as “GETVERSION”, so the function  GetVersion won’t be found again. To avoid that, <a href="O_102.htm#strA">select the “As is” letter case</a> in the program options. <br>
3 – loaded  library handle (0AA2)</p>
            <hr> <br><a name="0AA5"></a>
            <div class="mycode5">0AA5: call <span class="general1-variable">$hPROC</span> num_params <span class="general1-number">1</span> pop <span class="general1-number">1</span> <span class="general1-variable">$param</span></div>
            <p>0AA5 and similar opcodes  have variable number of parameters. This opcode has at least 3 parameters, and  also additional ones (passed to the called proc), number and values of which  depend on the called procedure. Total number of additional parameters must  equal to the parameter num_params. Each passed parameter must be numerical  (constant or variable fit), but not string. <br>
            <br>  <strong>Parameters:</strong><br>
1 – address of called proc. It may be the address inside the gta_sa.exe or  inside a loaded dll. <br>
2 – number of parameters to pass to the proc. <br>
3 – number of parameters that must be removed from the stack after the proc  execution. This value has to be within an interval from zero to num_params. The  exact value depends on the calling convention of the procedure. Usually, the  exe procedures do not clean the stack themselves, so the pop parameter mostly  equals to the num_params (all passed parameters are removed from the stack  after the proc execution).</p>
            <hr> <br><a name="0AA6"></a>
            <div class="mycode5">0AA6: call_method <span class="general1-variable">$Destroy</span> struct <span class="general1-variable">$CarStruct</span>  params <span class="general1-number">0</span> pop <span class="general1-number">0</span></div>
            <p>0AA6 calls the proc for the  class. Each class has a set of procedures called methods to operate with the  class data (like SB classes for reference). We call the Destroy method of the  CVehicle class in this example. With a proviso it’s possible to say that this  example is the same as the Car.Destroy() command.</p>
            <strong>Parameters:</strong><br>
1 – address of called proc. It may be the address inside the gta_sa.exe or  inside a loaded dll.<br>
2 – pointer to the class structure (can be obtained by the opcodes 0A96 - 0A98).<br>
3 – number of parameters to pass <br>
4 – number of parameters to be removed from the stack after the method  execution. Commonly, the methods clean the stack themselves, so the pop  parameter must equal to 0.
<hr> <br><a name="0AA7"></a>
            <div class="mycode5">0AA7: call_function <span class="general1-number">0x569660</span> num_params <span class="general1-number">2</span> pop <span class="general1-number">2</span>  <span class="general1-variable">$COORD_X $COORD_Y $GROUND</span></div>
            <p>0AA7 work similar to the  0AA5 except that additionally there is a variable to keep the result of called  function. It means that the last parameter here is always a variable. Thus the  num_params does not include this one. We call the function at address 0x569660 and  pass two parameters X and Y to it in this example. The function result will be  stored to the $GROUND.<br><br>
              <strong>Parameters:</strong><br>
1 – address of called function. It may be the address inside the gta_sa.exe or  inside a loaded dll.<br>
2 – number of parameters to pass to the function<br>
3 – number of parameters that must be removed from the stack after the function  execution. See the 0AA5 for explanation.</p>
            <hr> <br><a name="0AA8"></a>
<div class="mycode5">
  <pre class="NON">0AA8: call_function_method <span class="general1-number">0x4048E0</span> struct <span class="general1-number">0xB74494</span>  num_params <span class="general1-number">1</span> pop <span class="general1-number">0</span> <span class="general1-variable">$MyCar 0@</span></pre>
</div>
            <p>0AA8 calls a function  from the class and stores the result to a variable which is always the last  parameter. The principle of operation is similar to the opcodes 0AA6 and 0AA7.  We call the function at address 0x4048E0 and pass the vehicle handle as a  parameter to it in this example. Struct 0xB74494 is a collection of all in-game  vehicles. 0x4048E0 is a function that converts the vehicle handle to its struct  pointer (analogue of opcode 0A97). This pointer will be stored to the variable  0@. <br><br>
              <strong>Parameters:</strong><br>
1 – address of called function. It may be the address inside the gta_sa.exe or  inside a loaded dll.<br>
2 – pointer to the class structure (can be obtained by the opcodes 0A96 - 0A98).<br>
3 – number of parameters to pass<br>
4 – number of parameters to be removed from the stack after the method  execution. Commonly, the methods clean the stack themselves, so the pop  parameter must equal to 0.</p>
            <hr> <br><a name="0AA9"></a>
            <div class="mycode5">0AA9: is_game_version_original</div>
            <p>This opcode is used as a  condition. If you work with the original SA version 1.0 it returns True,  otherwise False. The opcode is useful to write a multiversion script.</p>
            <hr> <br><a name="0AAB"></a>
            <div class="mycode5">0AAB:   file_exists <span class="general1-string">&quot;CLEO\version.dll&quot;</span></div>
            <p>0AAB tests if a specified  file exists. This check is a part of opcodes 0A9A and 0AA2, so there is no need  to duplicate it for them.</p>
            <strong>Parameter:</strong> file name. If the path is relative (without specifying of a disk name),  it’s searched relatively of the current active directory (<a href="O_102.htm#strA">opcode 0A99</a>).
            <hr> <br><a name="0AAC"></a>
            <div class="mycode5">0AAC: <span class="general1-variable">$hMP3</span> = load_mp3<span class="general1-string"> &quot;CLEO\playlist\01.mp3&quot;</span></div>
            <p>0AAC loads a mp3 file and  stores a handle to it to a variable. </p>
            <strong>Parameters:</strong><br>
1 – variable to store the mp3 handle<br>
2 – mp3 file name. If the path is relative (without specifying of a disk name),  it’s searched relatively of the current active directory (<a href="#0A99">opcode 0A99</a>).
<hr> <br><a name="0AAD"></a>
            <div class="mycode5">0AAD: set_mp3 <span class="general1-variable">$hMP3</span> perform_action <span class="general1-number">1</span></div>
            <p>This opcode performs the  pre-defined action with the loaded mp3.</p>
            <strong>Parameters:</strong><br>
1 – mp3 handle obtained by 0AAC <br>
2 – a number to specify an action:<br>
  0: stop<br>
  1: play<br>
  2: pause<br>
  3: resume
<hr> <br><a name="0AAE"></a>
            <div class="mycode5">0AAE: release_mp3 <span class="general1-variable">$hMP3</span></div>
            <p>0AAE releases the mp3 file  and frees the memory.</p>
            <strong>Parameter:</strong> mp3 handle obtained by  0AAC.
            <hr> <br><a name="0AAF"></a>
            <div class="mycode5">0AAF: <span class="general1-variable">0@</span> = get_mp3_length <span class="general1-variable">$hMP3</span></div>
            <p>This opcode stores the  track length in seconds of the loaded mp3 to a variable.</p>
            <strong>Parameters:</strong><br>
1 – variable to store the result<br>
2 – mp3 handle
<hr> <br><a name="0AB0"></a>
            <div class="mycode5">0AB0:  key_pressed <span class="general1-number">0x73</span></div>
            <p>0AB0:&nbsp; key_pressed 0x73</p>
            0AB0 is used as a condition. This opcode tests if  the key is pressed on keyboard. If the key with specified code is pressed, it  returns True, otherwise False. <br><br>
            <strong>Parameter: </strong>virtual  key code. See <a href="articles1.htm">here</a> the list of them.
            <hr> <br>
            <div class="marg">CLEO 3 Opcodes</div>
            <br>
			<a name="0A92"></a>
            <div class="mycode5">0A92: create_custom_thread <span class="general1-string">&quot;ShowTextBox.s&quot;</span></div>
            <p>0A92 creates a new thread  from the file. If the file has an extension .cs the thread from it is created  automatically at game startup. At creating a custom thread, you can pass up to  34 parameters to it, like in opcode 004F.</p>
            <strong>Parameter:</strong> file name. The name must be specified with an extension if it has one. The  file is retrieved relatively of the directory ‘game\CLEO’ which is default path  for any CLEO files.
            <hr> <br><a name="0A93"></a>
            <div class="mycode5">0A93: end_custom_thread</div>
            <p>0A93 ends the custom CLEO thread. This opcode must be used only in the  CLEO threads (nor in CLEO-missions, nor in the main.scm). On the whole this  opcode is an analogue of the 004E.<br>
            To stop a CLEO-mission, use opcode 004E.</p>
            <hr> <br><a name="0A94"></a>
            <div class="mycode5">0A94: start_custom_mission <span class="general1-string">&quot;missions\CustomMission1&quot;</span></div>
            <p>0A94 begins a CLEO mission  from the specified file as the 0147 does. Look that the file extension is not  needed to specify. In fact the opcode will search for the file with the  extension .cm (Custom Mission). The mission starts from the file CLEO\missions\CustomMission1.cm  in this example.</p>
            <strong>Parameter:</strong> file name without an extension. The file is retrieved relatively of the  directory ‘game\CLEO’.
            <hr><br><a name="0A95" id="0A95"></a>
            <div class="mycode5">0A95: enable_thread_saving</div>
            <p>0A95 enables the saving  flag for the current thread. By default the CLEO threads status are not saved,  and they execute from the very beginning each time the game started. To save  the thread status, its local variables and such, add this opcode to the script.</p>
			<hr><br><a name="0AAA" id="0AAA"></a>
            <div class="mycode5">0AAA: <span class="general1-variable">0@</span> = thread <span class="general1-string">'OTB'</span>  pointer</div>
            <p>This opcode tests if a  thread with given name is active. If so, opcode will store the address  of this thread to a variable. If a thread  with given name is not found in the game memory, the  variable's value will be 0.<br><br>
              <strong>Parameters:</strong><br>
1 - a variable  to store search result <br>
            2 - a thread name to search</p>
            <hr> <br><a name="0AB1"></a>
            <div class="mycode5">0AB1: call_scm_func <span class="general1-label">@GetSQR</span> <span class="general1-number">1  10</span> <span class="general1-variable">$result</span></div>
            <p>This opcode calls a SCM  function, passes the parameters to it and stores the result to a variable(s). The  passed parameters values are copied to the local variables in series, then the  thread execution is transferred to the label, it executes code there and  returns after the opcode 0AB2.<br>
              <strong>Parameters:</strong><br>
1 – label (SCM function beginning)<br>
2 – number of parameters to pass</p>
            Then there are the passed parameters, a number of  10 in our case. After that, there should be the variables to store the result  of a SCM function (see <a href="#0AB2">0AB2</a>).
            <hr> <br><a name="0AB2"></a>
            <div class="mycode5">0AB2: ret <span class="general1-number">1</span> <span class="general1-variable">0@</span></div>
            <p>This opcode transfers the thread execution back to the 0AB1 opcode and  stores the returned values in its variables. <strong>Total number of returned values must equals to the number of variables  storing the result in the 0AB1. </strong>In this example the 0AB2 returns one value,  which is the value of the variable 0@, this value will be copied to the  variable $result (see 0AB1 example). If the 0AB2 opcode does not return any  values, it must have a 0 as the only parameter, and proper 0AB1 that calls such  a function should have no variables to store.</p>
            <strong>Parameters:</strong><br>
1 – number of values to return<br>
After that there are the returned values.
<hr>
            <p>This is a simple example  of SCM function calculating the square number.</p>
             <div class="mycode5"> <span class="general1-variable">0@</span> = <span class="general1-number">5</span><br>
              0AB1: call_scm_func <span class="general1-label">@GetSQR</span> <span class="general1-number">1  10</span> <span class="general1-variable">$result</span><br>
              <span class="general1-reservedword">end_thread</span><br><br>
              …..<br>
            <br>
            <span class="general1-label">: GetSQR</span><br>
              006A: <span class="general1-variable">0@</span> *= <span class="general1-variable">0@ </span><br>
              0AB2: ret <span class="general1-number">1</span> <span class="general1-variable">0@</span></div>
            <p>How it works. First of all,  the game comes to the opcode 0AB1. The game reads the number of parameters to  pass (1) and its values (10). The variable 0@ of the current thread equates to  10 (if there would more parameters to pass, the next one will be copied to the  1@, then 2@ and so on). After that the thread jumps to the label @GetSQR. Here  the square number is calculated (of a value in the 0@). Again, if there would  be more parameters, the values of 1@, 2@ etc may be taken in to account, if  needed. After the calculation, the game comes to the opcode 0AB2. The value of  0@ equals to 10*10 = 100 at this moment. Then the following happens: the  returned value(s) (0@) is copied to the variable(s) that is written in the  opcode 0AB1 which called this function. In our example such variable is  $result. After storing of the result, the thread returns back to the 0AB1 and  comes to the command end_thread. The value of the $result equals to the 100  (which is square of 10) at this moment.<br>
Finally say that 0AB2 could  return not only the variables values, but also the number constants. For  example, 0AB2: ret 1 1 will forever stores 1 to the result. </p>
            Also pay attention that the local variables are  stayed unchanged after the function calling. In this example, the variable 0@  contains a value of 5 before 0AB1. Despite the fact that this variable was used  in the function, after the calling it still equals to 5. This covers on all 32  local variables, so you can freely work with them within a function without  fear to lose data.
            <hr><br>
			  <a name="0AB3"></a>
            <div class="mycode5">0AB3: var <span class="general1-number">0</span> = <span class="general1-number">10</span></div>
            <p>0AB3 sets a new value of the global CLEO variable. These variables can  be used to data communication between CLEO threads, or between CLEO and the  main.scm. The total number of such variables is 100. Their values are saved in the  CLEO save. <br>
This variables can be used in the main.scm as alternative to the common  global variables.</p>
            <strong>Parameters:</strong><br>
1 – global variable ID. Should be in a range of 0..999<br>
2 – new value for the variable. (any number).
<hr><br><a name="0AB4"></a>
            <div class="mycode5">0AB4: <span class="general1-variable">0@</span>= var <span class="general1-number">0</span></div>
            <p>0AB4 stores to a variable  the value of the global CLEO variable. In this example, the 0@ will be equal to  10 (see 0AB3).</p>


             <strong>Parameters:</strong> <br>
1 – variable to store the global CLEO variable value<br>
2 – global CLEO variable ID. Should be in range of 0..999.
<hr><br><a name="0AB5"></a>
            <div class="mycode5">0AB5: store_actor <span class="general1-variable">$PLAYER_ACTOR</span> closest_vehicle_to <span class="general1-variable">0@</span> closest_ped_to <span class="general1-variable">1@</span></div>
            <p>This opcode stores to  the variables handles of a vehicle and ped being closest to the actor. If  there’s no any vehicle or ped close to him, the proper variable will contain  value of -1.<br>
              <br>
              <strong>Parameters:</strong><br>
              1 – actor handle<br>
2 – variable to store a vehicle being closest to him<br>
            3 – variable to store a ped being closest to him</p>
            <hr><br><a name="0AB6"></a>
            <div class="mycode5">0AB6: store_target_marker_coords_to <span class="general1-variable">0@ 1@ 2@</span> <span class="general1-comment">// IF and SET</span></div>
            <p>This opcode stores to  the variables coordinates of the place marked with red target point on the map  (right-click on the map). If the target point does not exist, the variables do  not change their values.<br>
              <br>
              <strong>Parameters:</strong><br>
              1,2,3 – variables to store XYZ coords</p>
<hr><br><a name="0AB7"></a>
            <div class="mycode5">0AB7: get_vehicle <span class="general1-variable">$CAR</span> number_of_gears_to <span class="general1-variable">10@</span></div>
            <p>Opcode 0AB7 stores to a  variable total number of gears for specified vehicle. This number equals to the  parameter TransmissionData.nNumberOfGears in the file handling.cfg.<br>
              <br>
              <strong>Parameters:</strong><br>
              1 – a vehicle handle<br>
2 – variable to store number of gears</p>
<hr><br><a name="0AB8"></a>
            <div class="mycode5">0AB8: get_vehicle <span class="general1-variable">$CAR</span> current_gear_to <span class="general1-variable">11@</span></div>
            <p>This opcode stores to a  variable number of current gear for specified vehicle.<br>
              <br>
              <strong>Parameters:</strong><br>
              1 – a vehicle handle<br>
2 – variable to store current gear</p>
<hr><br><a name="0AB9"></a>
            <div class="mycode5">0AB9: get_mp3 <span class="general1-variable">$hMP3</span> state_to <span class="general1-variable">7@</span></div>
            <p>This opcode stores to a  variable a state of a MP3 file.<br>
              <br>
              <strong>Parameters:</strong><br>1 – handle of a loaded mp3-file (opcode <a href="#0AAC">0AAC</a>)<br>
2 – variable to store mp3 file state:<br>
&nbsp;&nbsp;&nbsp;&nbsp; 1 – file is playing<br>
&nbsp;&nbsp;&nbsp;&nbsp; 2 – file paused<br>
&nbsp;&nbsp;&nbsp;&nbsp; -1 – file is stopped</p>
<hr><br><a name="0ABA"></a>
            <div class="mycode5">0ABA: end_custom_thread_named <span class="general1-string">'BENZIN'</span></div>
            <p>0ABA ends a CLEO-thread with given name. A thread gets its name with the opcode 03A4. If the thread wasn't named with 03A4, the thread gets its name by first 7 letters of the file name. For example, the thread from the file test.cs will have name 'test.cs'; from the file myscript.cs - 'myscrip'.

The opcode 0ABA immediately finishes the execution of a thread with given name. This opcode is the same as 0459, but is made for the CLEO scripts.<br>
              <br>
              <strong>Parameters:</strong><br>1 - name of the thread to end.</p>
			  <hr><br><a name="0ABD" id="0ABD"></a>
            <div class="mycode5">0ABD:   vehicle <span class="general1-variable">0@</span> siren_on</span></div>
            <p>0ABD checks if the siren of the vehicle <span class="general1-variable">0@</span> is on. If so, the condition will be true.<br>
              <br>
              <strong>Parameters:</strong><br>1 - handle of the vehicle</p>
			  <hr><br><a name="0ABE" id="0ABE"></a>
            <div class="mycode5">0ABE:   vehicle <span class="general1-variable">0@</span> engine_on</span></div>
            <p>0ABE checks if the engine of the vehicle <span class="general1-variable">0@</span> is on. If so, the condition will be true.<br>
              <br>
              <strong>Parameters:</strong><br>1 - handle of the vehicle</p>
			  <hr><br><a name="0ABF"></a>
            <div class="mycode5">0ABF: set_vehicle <span class="general1-variable">0@</span> engine_state_to <span class="general1-number">0</span></span></div>
            <p>0ABF enables or disables the vehicle's engine.<br>
              <br>
              <strong>Parameters:</strong>
			  <br>1 - handle of the vehicle
			  <br>2 - engine's new state:
			  <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 - off
			  <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 - on</p>
</TD>
          <TD width="5"
        background="rtd.gif"></TD>
      </TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5><IMG height=20
            src="img/en/mtdlbot.png" width=5 border=0></TD>
          <TD align=left
            background="mtdbgbot.png"></TD>
          <TD class=ninfo align=right
          background="mtdbgbot.png">&nbsp;
            </TD>
          <TD width=5><IMG height=20
            src="img/en/mtdrbot.png" width=5
        border=0></TD></TR></TBODY></TABLE></DIV>
<BR><BR></TD></TR><td width="100%"></TBODY></TABLE>
</TABLE></body></html>
