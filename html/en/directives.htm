<!DOCTYPE HTML>
<html>
<head>
  <title>Directives</title>
<link rel="stylesheet" type="text/css" href="style/style2.css">
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
</head><body>

<h2>Directives</h2>

<p>Preprocessing directives are the special words that make the compiler function in different ways. They are denoted with the symbol $ and located between brackets {}.</p>

<p>List of available directives:</p>
<ol>
	<li><a href="#VERSION">$VERSION</a></li>
	<li><a href="#RESTORE_VERSION">$VERSION_RESTORE</a></li>
	<li><a href="#INCLUDE">$INCLUDE / $I</a></li>
	<li><a href="#EXTERNAL">$EXTERNAL / $O</a></li>
	<li><a href="#CLEO">$CLEO</a></li>
	<li><a href="#NOSOURCE">$NOSOURCE</a></li>
	<li><a href="#OPCODE">$OPCODE / $O</a></li>
</ol>

<h3><a name="VERSION"></a>$VERSION</h3>
<p class="note">This directive is deprecated since v3.1.0</p>

<p>This directive sets what version of opcodes should be used during compilation.

<p class="syntax">Syntax:<br>

$VERSION x.y.zzzz<br><br>
x - <a href="edit_modes.htm">edit mode ID</a><br>

y - parameters order.<br>
&nbsp;&nbsp;&nbsp;0 - original, numeric<br>
&nbsp;&nbsp;&nbsp;1 - custom order<br>
zzzz - opcodes version
</p>

<p>By default the compiler uses version <span class="i">current edit mode.1.0000</span>.</p>

<h3><a name="RESTORE_VERSION"></a>$VERSION_RESTORE</h3>
<p class="note">This directive is deprecated since v3.1.0</p>

<p>This directive sets the version to its previous value prior to using $VERSION.</p>

<h3><a name="INCLUDE"></a>$INCLUDE</h3>
<p>This directive allows to insert the content of an external text file in the current file. If the compiler finds this directive it opens the file by the path passing as the directive�s parameter and continues the compiling process from the code written in the included file. When it reaches the end of the file it returns back to the previous file.</p>
<p class="syntax">Syntax:<br>
<span class="directive">{$INCLUDE file path}</span><br>
or<br>
<span class="directive">{$I file path}</span></p>
<p>Example: <span class="directive">{$I loadwav.txt}</span> or <span class="directive">{$I C:\dev\getarrayindex.txt}</span></p>
<p><a name="rules"></a>If the <span class="i">file path</span> is relative, the compiler searches the file in the following order:</p>
<ol>
<li>directory of the file with the directive*</li>
<li>Sanny Builder\data\&lt;game&gt;</li>
<li>Sanny Builder root directory</li>
<li>game directory</li></ol>

<p>It none of these directories contains a needed file the compiler throws an exception.
  You can use this directive unlimited number of times. The included files  can contain this directive as well.

<p class="note">* All paths used in the $INCLUDE directive are relative to the directory of a currently processed file.</p>

<h3><a name="EXTERNAL"></a>$EXTERNAL</h3>
<p>This directive makes the compiler to process the file like external script. Meaning, the outputfile will be without header and with local label offsets, so it will be the same as an .scm file from the script.img. Using this directive requires that the file will contain only one thread (also without missions and other scripts).</a></p>

<p>The alternative way to get such file is a debug option <a href="console.htm#SKIP_SCM">SKIP_SCM_HEADER</a>. This option could be enabled in the console or from the list on the main panel.</p>

<p class="syntax">Syntax:<br>
<span class="directive">{$EXTERNAL}</span><br>
or<br>
<span class="directive">{$E}</span></p>

<h3><a name="CLEO"></a>$CLEO</h3>
<p>This directive is an analogue of the $E one, but the output file is copied into the �game\CLEO� directory automatically. It also gets the file extension specified as a directive parameter.</p>
<p class="syntax">Syntax:<br>
<span class="directive">{$CLEO &lt;file extension&gt;}</span>
<br><span class="i">File extension</span> is an optional parameter. If no extension is present, the compiler uses a default value <span class="i">.cs</span></p>
<p>Example: <span class="directive">{$CLEO}</span> <span class="comment">// a file will get the default extension .cs</span></p>
<p>So this directive is the perfect solution to compile a <a href="Cleo_SCRIPT.htm">CLEO script</a>.

<h3><a name="NOSOURCE"></a>$NOSOURCE</h3>
<p>This directive prohibits the compiler from including a source code of the script. By default, when the option <a href="O_101.htm#SCM">Add extra info to SCM</a> is enabled, Sanny Builder adds a source code into a script file (only when either the directive <b>$EXTERNAL</b> or <b>$CLEO</b> is present). This directive changes the default behaviour of the compiler, not allowing to include the source code into an output file.</p>
<p class="syntax">Syntax:<br>
<span class="directive">{$NOSOURCE}</span></p>

<h3><a name="OPCODE"></a>$OPCODE</h3>
<p>This directive allows to register a custom opcode directly via the script. Commonly, all the opcodes definitions are contained in a <a href="gta_ini.htm">special file</a>, one for each supported game. But sometimes it's necessary to add a custom opcode for the current script. The directive $OPCODE makes it possible without editing an opcodes INI file.</p>
<p class="syntax">Syntax:<br><span class="directive">{$OPCODE &lt;opcode definition&gt;}</span><br>
or<br>
<span class="directive">{$OPCODE &lt;file name&gt;}</span><br>
or<br>
<span class="directive">{$OPCODE}</span></p>

It accepts an <span class="i">opcode definition</span> in <a href="gta_ini.htm#syntax">the same syntax</a> as the INI file.</p>
<p>Example: <span class="directive">{$OPCODE 0CCC=1,my_new_opcode %1d%}</span></p>
<p>This directive also accepts a <span class="i">file name</span> as its parameter. This file must contain only opcodes definitions to be loaded. If no global path is specified for the file, the compiler searches it using <a href="#rules">same rules as for $INCLUDE</a>.</p>
<p>Example: <span class="directive">{$OPCODE additional_opcodes.ini}</span></p>
<p>When used <span class="i">without any parameter</span>, this directive reloads the original opcodes definitions file, so all the changes made by previous using of this directive are gone.</p>
<p>Example: <span class="directive">{$OPCODE}</span></p>
<p class="note">The short variant of this directive is $O.</p>
</body></html>
