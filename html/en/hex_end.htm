<!DOCTYPE HTML>
<html>
<head>
<title>HEX..END</title>
<link rel="stylesheet" type="text/css" href="style/style2.css">
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
</head><body>

<h2>HEX..END</h2>
<p>Sanny Builder supports writing a raw content in an output file. All values within this construct are written in an output file without any checks.</p>
<p class='note'>Use this feature only if you know what you're doing. Any mistakes will corrupt the script file making it unreadable by the game or a script editor.</p>
<p class='syntax'>Syntax:<br>
<span class="reservedword">hex</span><br>
&lt;any hexadimal numbers&gt;<br>
<span class="reservedword">end</span><br>
</p>
<p>Example:</p><pre>
<span class="reservedword">hex</span>
<span class="number">04 00 02 0800 04 01</span>
<span class="reservedword">end</span></pre></p>

<p>This sequence of bytes is a compiled opcode 0004: $2 = 1, so the game will correctly read it and set the value of the variable $2 to 1.

<p class='note'>You must specify each byte you're going to write with two digits. All spaces are ignored. The compiler processes any two digits with a space between them as a single byte value. A single digit (0..F) is affixed with 0. So, for example, <span class="number">A B C</span> is written as a number 0xAB0C.</p>

<p>The HEX..END construct also accepts string literals, labels, global variables identifiers, model names. They are compiled without a preceeding data type.</p>
<p><pre><span class="label">:get_offset</span>
<span class="reservedword">hex</span>
<span class="number">04 00 02 </span><span class="variable">$PLAYER_CHAR</span><span class="number"> 01 </span><span class="label">@get_offset</span>
<span class="reservedword">end</span></pre></p>
<p>This is an exact copy of the opcode 0004: <span class="variable">$PLAYER_CHAR</span> = <span class="label">@get_offset</span></p>

<p>String literals are compiled as a sequence of characters enclosed in double quotes.</p>
<p><pre><span class="reservedword">hex</span>
<span class="string">"This is a string"</span>
<span class="reservedword">end</span></pre></p>
<p>The following escape sequences are supported within a string:</p>
<ul>
<li>\0 - null - 0</li>
<li>\b - backspace - 8</li>
<li>\t - tab - 9</li>
<li>\n - line feed - 10</li>
<li>\r - carriage return - 13</li>
<li>\x&lt;nn&gt; - numeric escape sequence - nn</li>
<li>\&lt;char&gt; - escape char - &lt;char&gt;</li>
</ul>
<p>Example:</p>
<pre><span class="reservedword">hex</span>
<span class="string">"\0\b\t\n\r\xDD"</span>
<span class="reservedword">end</span></pre></p>
It produces the following sequence of bytes: <span class='number'>00 08 09 0A 0D DD</span>.
<p class='note'>Currently multiple spaces in a string literal are converted into a single one. Thus a line "This&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string" is converted into "This is a string". Use an escape character \ to make multiple spaces in a string literal: <span class="string">"This \ \ \ is \ a \ \ \ \ string".</span></p>
<p>Also you can use the aDMA data type to write a numeric constant in an output file. The number after the &amp; sign can be both positive or negative, decimal or hexadimal.</p>
<p><pre><span class="reservedword">hex</span>
<span class="variable">&1000</span> <span class="variable">&</span><span class="number">-0xA33500</span>
<span class="reservedword">end</span></pre></p>
This example produces the following sequence of bytes: <span class='number'>E8 03 00 CB 5C FF</span>.
</body></html>
