<!DOCTYPE HTML>
<html>
<head>
  <title>CLEO 3: scripts</TITLE>
<link rel="stylesheet" type="text/css" href="style/style.css">
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
</HEAD>
<BODY topMargin=0 >
<TABLE
style="BORDER-RIGHT: medium none; BORDER-TOP: medium none; BORDER-LEFT: medium none; BORDER-BOTTOM: #c0c0c0 1px solid"
height=121 cellSpacing=0 cellPadding=0 width=640>
  <TBODY>
  <TR>
    <TD vAlign=top><IMG
      src="img/en/logo2.jpg" width="640" height="121" border=0 class="conthdr" ></TD>
</TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width=640 border=0>
  <TBODY>

  <TD width="100%" height="100%" vAlign=top>
   <DIV><IMG
      src="img/en/old/CLEO/articles.png" width="640" height="33"></DIV>


      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=3><IMG height=36
            src="img/en/mtdl.png" width=5></TD>
          <TD width="571" height=36 vAlign=top
          background="mtdbg.png" class=ntitle>CLEO3: scripts</TD>
      <TD width=18><IMG height=36
            src="img/en/mtdr.png"
      width=20></TD></TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5 background="ltd.gif"></TD>
          <TD width="598" vAlign=top class=news>

	<P>CLEO 3 allows adding new  scripts needlessly to start a new game. Strictly speaking, the main.scm  state does not matter for these scripts as CLEO-scripts are run and functioned  separately from it.<br><br>
What does it give? You can add new script at any stage of the game or  delete existing one. Even so, you do not need to edit the main.scm, so the need  of starting a new game, the saves incompatibility, script limits – all these problems  disappear right away. <br><br>
The CLEO-script is an  ordinary script written using the opcodes in Sanny Builder. Each script should  be made as a single file with an extension .cs (Custom Script). The dominant  requirement of writing such scripts is they must be compiled as the external  scripts. <br><br>
There are several ways of making of a CLEO-script being able to work correctly  in the game. First: you add a new external script in the source file, compile  it, and then extract that script from the file script.img. The extracted file  will have the extension .scm, so you only need to change it on the .cs and copy  to the folder ‘game\CLEO’.<br><br>
The second way is easier. Create a new file in Sanny Builder, write the <a href="directives.htm#EXTERNAL">directive  $E</a> at the beginning of it, and compile.  The compiled file will be the same as that one extracted from the script.img.  You only need to change its extension on the .cs and copy to the ‘game\CLEO’.</P>
    Finally, the easiest one. Create a new file in  Sanny Builder, write the  <a href="directives.htm#CLEO">directive $CLEO</a> at the beginning of the file, and compile. The compiled file will be  copied into the ‘game\CLEO’ directory and will have a file extension specified  by the directive (.cs by default).<br>
        <br>
      The CLEO-scripts could be  used as missions. The compiling process is the same, but the output file must  have the extension .cm (Custom Mission). To start this mission, use <a href="Cleo_OP.htm#0A94">the opcode 0A94</a>. <br>
      <br>
      The rules you must follow  using CLEO 3:
      <ol start="1" type="1">
      <li><span class="general1-reservedword">One file – one thread.</span> Each CLEO-script must be made as a single       thread compiled in a single file. If you need more threads for your       script, use the opcodes 004F or <a href="Cleo_OP.htm#0A92">0A92</a>, depending of where is that       additional thread located - in the main.scm or in a separate cs-file. </li>
      <li><span class="general1-reservedword">Never use the opcode 004E in the CLEO-threads.</span> They work separately       from the common threads, so the using of this opcode will cause an error. Use <a href="Cleo_OP.htm#0A93">the opcode 0A93</a>, if you need to stop a CLEO-thread. Conversely,       <span class="general1-reservedword">never use the opcode 0A93 in the CLEO-missions</span>, but instead use the 004E       to cancel a mission.</li>
	  <li><span class="general1-reservedword">Never use custom global variables in your CLEO-scripts ($car, $foo, $blahblah, etc)</span>, or your script will work incorrectly. You may use only a few global variables (read below).</li>

      </ol>
    <p>To install the CLEO script  it’s only necessary to copy the file with an extension .cs to the folder  ‘game\CLEO’. The file name does not matter, but it uses at the thread  initialization to name it. For example, the CLEO thread located in the file showsavescreen.cs  has the name SHOWSAV.<br><br>
      To remove the script, just  delete the proper file from the CLEO directory.<br><br>
      The CLEO thread status may be saved and loaded along with the common threads. It does not saved  by default. The saves themselves are located in the folder CLEO\cleo_saves. The is an own save  for each save slot. The save file stores only the CLEO threads having the saving flag enabled  (<a href="Cleo_OP.htm#0A95">0A95 opcode</a>). The save file stores not only the active threads, but also the ones being forced  to end (<a href="Cleo_OP.htm#0A93">0A93 opcode</a>), to prevent their rerun at loading.
If at the loading one of saved thread is not found, there is no error. If you add a new script  that is not present in the current save file, it will be loaded along with the others and to  work from the very beginning.
 <br>
 <br>
      The CLEO thread is the ordinary  thread on the whole. It has 32 local variables and 2 timers incrementing  constantly. You can pass up to 34 parameters at creation of that thread or a  CLEO mission (by analogy with the opcode 004F).<br><br>
      An important thing concerns  with data communication between a CLEO script and the main.scm. To use the SCM  code, its variables, threads you have to compile the CLEO script as an external  one (first way). But this method is not recommended, as such a script becomes  very sensible to the any main.scm change. <span class="general1-comment">Implicitly,  a CLEO script should be sufficient for itself and use minimum of the SCM data</span><em>. </em>However,  you can freely use global variables names from the CustomVaribles.ini (for  example, <span class="general1-variable">$PLAYER_CHAR</span>, <span class="general1-variable">$PLAYER_ACTOR</span>, <span class="general1-variable">$ONMISSION</span>, etc). <br>
      Also, for the data communicate between the main.scm and CLEO, or between the  CLEO scripts you may use the CLEO variables (see opcodes 0AB3, 0AB4).<br><br>
      The CLEO complete set includes  the examples of simple scripts with sources.</p>
    </TD>
          <TD width="5"
        background="rtd.gif"></TD>
      </TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5><IMG height=20
            src="img/en/mtdlbot.png" width=5 border=0></TD>
          <TD align=left
            background="mtdbgbot.png"></TD>
          <TD class=ninfo align=right
          background="mtdbgbot.png">&nbsp;
            </TD>
          <TD width=5><IMG height=20
            src="img/en/mtdrbot.png" width=5
        border=0></TD></TR></TBODY></TABLE></DIV>
<BR><BR></TD></TR><td width="100%"></TBODY></TABLE>
</TABLE></body></html>
