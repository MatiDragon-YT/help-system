<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD><TITLE>Sanny Builder Help: About the program</TITLE>
<link rel="stylesheet" type="text/css" href="style/style.css">


</HEAD>
<BODY topMargin=0 >

<TABLE
style="BORDER-RIGHT: medium none; BORDER-TOP: medium none; BORDER-LEFT: medium none; BORDER-BOTTOM: #c0c0c0 1px solid"
height=121 cellSpacing=0 cellPadding=0 width=640>
  <TBODY>
  <TR>
    <TD vAlign=top width="100%"><IMG
      src="img/en/logo2.jpg" width="640" height="121" border=0 class="conthdr" ></TD>
  </TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width=640 border=0>
  <TBODY>

  <TD width="100%" height="100%" vAlign=top>
   <DIV><IMG
      src="img/en/old/articles/articles.png" width="640" height="33"></DIV>


      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5><IMG height=36
            src="img/en/mtdl.png" width=5></TD>
          <TD class=ntitle vAlign=top background="mtdbg.png" height=36>Mission Coding with Sanny Builder Tutorial</TD>
          <TD width=5><IMG height=36
            src="img/en/mtdr.png"
      width=20></TD></TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5 background="ltd.gif"></TD>
          <TD class=news1 vAlign=top>
 <center>
                <span style="font-size: 21pt; line-height: 100%;"><span class="style1">Grand Theft Auto</span><br>
                <br>
                <span class="style1" style="color: orange;">San Andreas</span><br>
                <br>
                <br>
                <span class="style1" style="color: red;">Mission Coding with Sanny Builder Tutorial</span><br>
                <span style="color: gray;">Part I</span><br>
                <span style="color: gray;">Getting started</span><br>
                <br>
                <br>
                </span>
              </center>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <span style="font-size: 14pt; line-height: 100%;"><u><b><a name="0intro"> Introduction </a></b></u></span>
                <br>
                <br>
                Hi, since a long time I wanted to make a tutorial for
                newbies, it won't tell you what to do, it will helps you
                doing what you want to do. It can also be a good tutorial for
                Sanny builder. I tried to make a tutorial for anyone even if
                you don't know anything about programming. You might want
                jump straight to <a href="http://tomworld10.free.fr/GTASA/tutorials/coding/V3/Sannys/articles2.htm" target="_blank">part II</a>, if you think you know enough
                about coding to get started.<br>
                <br>
                <br>
                With Mission coding (or Mission scripting) you can make your
                own missions, your own mods or modificate existing ones (you
                can find many in this <a href="http://www.gtaforums.com/index.php?showforum=65" target="_blank">Mission Mods</a> and this <a href="http://www.gtaforums.com/index.php?showforum=49" target="_blank">Mission Coding</a> (and is where you can ask
                questions about coding) . <br>
                <br>
                <br>
                <br>
                Mission coding is done with the files main.scm and script.img
                in data\script folder of San Andreas. Main.scm is a compiled
                file, so it's made in a language that the computer can
                understand it easily. If you open main.scm with hexadecimal
                editor it looks like that inside :<br>
               <strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON"><span class="general1-number">D6 00 04 00 19 01 02 45 0E 4D 00 01 FE 3D 87 02 A6 00 02 45 0E</span></pre></div>
                <br>
                So you need to uncompile it to have it in a human readable
                format, then we will be able to program in it. You don't need
                to do anything on the file script.img, the file is needed, so
                each main.scm will need his own script.img.<br>
                <br>
                <br>
                So to decompile main.scm you need <a href="http://sannybuilder.com/" target="_blank">Sanny
                Builder</a>. There is many other decompiler but if you a
                beginer Sanny will be the best coding solution, because it's
                continuously update, has proper support, is fast, is
                colorfull <img src="img/en/Part20I.files/rolleyes.gif" width="20" height="18">
                 !!!!! And the tutorial is made with and for <a href="http://sannybuilder.com/" target="_blank">Sanny
                Builder</a>. <br>
                Sanny Builder is close to Barton Waterduck's San Andreas
                Mission builder but because the syntax is different I highly
                advise to use <a href="http://sannybuilder.com/" target="_blank">Sanny Builder</a> but if you want to disobey,
                here it is : <a href="http://www.kostelecky.com/craig/SAMB033.rar" target="_blank">Barton's Waterduck Mission Builder</a>
                -Craig's version, thanks to him.<br>
                <br>
                <br>
                <br>
                Something very important, to get informations, the Sanny
                Builder's Help, it' full of very useful information and always available (like offline).<br>
                <br>
                <br>
                <br>
                <br>
Launch the executable follow usual installation process. Then go first
to Tools\options (or press F10). In general tab check Show progress,
Show report, Show warning, Quick game loading, Condition check, Ranges
check, Writes opcodes, maybe Replace mission numbers, Insert Original
mission names, Add extra info to SCM. I will explain later why we need
those.<br>
                <br>
                <br>
                <br>
                Like this :<br>
                <img src="img/en/Part20I.files/rdfgbh3.PNG" width="446" height="407">
                <br>
                Close Sanny Builder and reopen it. <br>
                <br>
                <br>
                There is many other good tutorials that should help you : <a href="http://www.gtaforums.com/index.php?showtopic=214055&amp;view=findpost&amp;%20%20p=3163789" target="_blank">YeTi's SA Coding Tutorial Part One</a>, <a href="http://www.gtaforums.com/index.php?showtopic=214321&amp;view=findpost&amp;%20%20p=3167813" target="_blank">YeTi's SA Coding Tutorial Part Two</a>, <a href="http://www.gtaforums.com/index.php?showtopic=232687&amp;view=findpost&amp;%20%20p=3498916" target="_blank">Y_less quick tuto</a>, those are for San
                Andreas. Vice City tutorials can help you too : <a href="http://www.gtaforums.com/index.php?showtopic=169526&amp;view=findpost&amp;%20%20p=2352371" target="_blank">Alex "Y_Less" Cole's n00b guide to
                coding</a>, <a href="http://www.gtaforums.com/index.php?showtopic=156033&amp;view=findpost&amp;%20%20p=2137684" target="_blank">littleguna's VC Coding Tutorial</a>, <a href="http://www.gtaforums.com/index.php?showtopic=189876&amp;view=findpost&amp;%20%20p=2794115" target="_blank">YeTi's VC Coding Tutorial Part One</a>, <a href="http://www.gtaforums.com/index.php?showtopic=191001&amp;view=findpost&amp;%20%20p=2819222" target="_blank">YeTi's VC Coding Tutorial Part Two</a>. The
                <a href="http://www.gtaforums.com/index.php?showtopic=141222&amp;view=findpost&amp;%20%20p=1834859" target="_blank">GTAforums tutorial archive</a>. You can find
                more in this forum <a href="http://www.gtaforums.com/index.php?showforum=109" target="_blank">here</a>. <br>
                You can visit <a href="http://www.gtamodding.com/" target="_blank">GTAmodding.com</a> and particulary <a href="http://www.gtamodding.com/index.php?title=Category:Mission_Scripti%20%20ng" target="_blank">Mission scripting</a> category. <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <span style="font-size: 14pt; line-height: 100%;"><u><b><a name="1scmarchi"> 1.
                Main.scm architecture : </a></b></u></span>
                <br>
                <br>
                <br>
                So now copy original main.scm and script.img to a new coding
                working folder (or anywhere you want : desktop, My docs,
                recycle bin, your mum's docs <img src="img/en/Part20I.files/biggrin.gif" width="20" height="18">
                 ....) you've created and open it (make backups !!!!! like
                doing right away a new folder for original main.scm and
                script.img) by clicking open and selecting SCM File (*.scm).
                You can see the progress bar filling up (That's why we've
                truned on the option "Show progress"). <br>
                <br>
                <br>
                <br>
                - Define section :<br>
                <br>
                And you will get something like that :<br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2"><span class="general1-comment">// This file was decompiled using sascm.ini published by Seemann (http://sannybuilder.com/files/SASCM.rar) on 13.10.2007</span>
DEFINE OBJECTS <span class="general1-number">389</span>
DEFINE OBJECT SANNY BUILDER <span class="general1-number">3.03</span>
DEFINE OBJECT INFO                     <span class="general1-comment">// Object number -1</span>
DEFINE OBJECT KEYCARD                  <span class="general1-comment">// Object number -2</span>
DEFINE OBJECT AD_FLATDOOR              <span class="general1-comment">// Object number -3</span>
DEFINE OBJECT KB_BANDIT_U              <span class="general1-comment">// Object number -4</span>
etc...</pre>
</div>

                <br>
                <br>
                As you can see it defines the objects that will be used in
                the main.scm, there is 389 of them like said on top (<span class="code">DEFINE OBJECTS</span> <span class="general1-number">389</span>). To add an object just go to to last one and add yours.<br>
                <br>
                <br>
                <br>
                Further down (much further down) you can find that :<br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">DEFINE MISSIONS <span class="general1-number">135</span>
DEFINE MISSION <span class="general1-number">0</span> AT <span class="general1-label">@INITIAL</span>
DEFINE MISSION <span class="general1-number">1</span> AT <span class="general1-label">@INITIL2</span>
DEFINE MISSION <span class="general1-number">2</span> AT <span class="general1-label">@INTRO</span>
DEFINE MISSION <span class="general1-number">3</span> AT <span class="general1-label">@NONE</span>
etc...</pre></div>
                <br>
                <br>
                This defines the missions, there is 135 of them like said on
                top (<span class="code">DEFINE MISSIONS</span> <span class="general1-number">135</span>). If you use Xbox, Playstation 2, or <a href="http://www.gtaforums.com/index.php?showtopic=208450&amp;view=findpost&amp;%20%20p=3069233" target="_blank">jarjar 2-player</a> mod files you can see
                that there is more missions which are 2 player console mission
                but that's another story...<br>
                <br>
                <br>
                <br>
                <br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">DEFINE EXTERNAL_SCRIPTS <span class="general1-number">78</span> <span class="general1-comment">// Use -1 in order not to compile AAA script</span>
DEFINE SCRIPT PLAYER_PARACHUTE AT <span class="general1-label">@PLCHUTE</span> <span class="general1-comment">// 0</span>
DEFINE SCRIPT PARACHUTE AT <span class="general1-label">@PARACH</span> <span class="general1-comment">// 1</span>
DEFINE SCRIPT BCESAR2 AT <span class="general1-label">@BCESAR2</span> <span class="general1-comment">// 2</span>
DEFINE SCRIPT BCESAR3 AT <span class="general1-label">@COKEC</span> <span class="general1-comment">// 3</span>
DEFINE SCRIPT SLOT_MACHINE AT <span class="general1-label">@BANDIT</span> <span class="general1-comment">// 4</span>
etc...</pre></div>
                <br>
                <br>
                This defines the external scripts which are scripts
                (programs) that are triggered when needed, there is 78 of
                them like said on top. That's what handles the Parachute
                (player -<span class="general1-label">PLAYER_PARACHUTE</span>- and non-players -<span class="general1-label">PARACHUTE</span>-), Games at the casino (<span class="general1-label">ROULETTE</span>, <span class="general1-label">VIDPOK</span> -Video Poker-, <span class="general1-label">BLACKJ</span> -Black Jack-, <span class="general1-label">WHEELO</span> -Wheel Of Fortune-, etc...), Shops (<span class="general1-label">AMMU</span>, <span class="general1-label">TATTOO</span>, <span class="general1-label">BARBER</span>, <span class="general1-label">JUNKFUD</span>, <span class="general1-label">CARMOD</span>), and many other thing more or less weird
				(<span class="general1-label">DEBT</span>, <span class="general1-label">STRIPW</span>, <span class="general1-label">GF_SEX</span>, <span class="general1-label">HOME_BRAINS</span>...) More about those later on.<br>
                <br>
                <br>
                <br>
                Then you get to those 2 lines :
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">DEFINE UNKNOWN_EMPTY_SEGMENT <span class="general1-number">0</span><br>
DEFINE UNKNOWN_THREADS_MEMORY <span class="general1-number">574</span></pre></div>
                Which are undocumented and useless for me and you.<br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                - Main section :<br>
                <br>
                Now you can see something like this :<br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON"><span class="general1-directive"><br>{$VERSION 3.1.0027}<br></span>
<span class="general1-comment">//-------------MAIN---------------</span>
03A4: name_thread <span class="general1-string">'MAIN'</span>
016A: <span class="general1-reservedword">fade</span> <span class="general1-number">0</span> time <span class="general1-number">0</span>
042C: set_total_missions_to <span class="general1-number">147</span>
030D: set_max_progress <span class="general1-number">187</span>
0997: set_total_respect_points_to <span class="general1-number">1339</span>
01F0: set_max_wanted_level_to <span class="general1-number">6</span>
0111: set_wasted_busted_check_to <span class="general1-number">0</span>
00C0: set_current_time_hours_to <span class="general1-number">8</span> current_time_minutes_to <span class="general1-number">0</span>
04E4: unknown_refresh_game_renderer_at <span class="general1-number">2488.562 -1666.864</span>
03CB: set_rendering_origin_at <span class="general1-number">2488.562 -1666.864 13.3757</span>
062A: change_stat <span class="general1-number">165</span> <span class="general1-reservedword">to</span> <span class="general1-number">800.0</span> <span class="general1-comment">// floating-point values</span>
062A: change_stat <span class="general1-number">23</span> <span class="general1-reservedword">to</span> <span class="general1-number">50.0</span> <span class="general1-comment">// floating-point values</span>
062A: change_stat <span class="general1-number">21</span> <span class="general1-reservedword">to</span> <span class="general1-number">200.0</span> <span class="general1-comment">// floating-point values</span>
062A: change_stat <span class="general1-number">160</span> <span class="general1-reservedword">to</span> <span class="general1-number">0.0</span> <span class="general1-comment">// floating-point values</span>
0629: change_stat <span class="general1-number">181</span> <span class="general1-reservedword">to</span> <span class="general1-number">4</span> <span class="general1-comment">// integer values</span>
0629: change_stat <span class="general1-number">68</span> <span class="general1-reservedword">to</span> <span class="general1-number">0</span> <span class="general1-comment">// integer values</span>
0053: <span class="general1-variable">$PLAYER_CHAR</span> = create_player <span class="general1-model">#NULL</span> at <span class="general1-number">2488.562 -1666.864 12.8757</span>
etc...</pre></div>
                <br>
                <br>
                <br>
                Up to <b>before</b> there (use Sanny search tool and search "mission
                0") :<br><strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON"><span class="general1-comment">//-------------Mission 0---------------
// Originally: Initial 1</span><br>
<span class="general1-label">:INITIAL</span>
03A4: name_thread <span class="general1-string">'INITIAL'</span>
06C8: enable_riot <span class="general1-number">0</span>
0004: <span class="general1-variable">$1515</span> = <span class="general1-number">0</span>
0005: <span class="general1-variable">$1500</span> = <span class="general1-number">5.0</span>
etc...</pre></div><br><br>

                It is called the main part or the main section (and sometimes
                with imprecision named the main thread). In this there is
                many little bit of scripts that for example create the red
                circles which start missions, the thing that handles the
                phone calls (<span class="general1-label">CELLFON</span> and other things), that handles grilfriends, from where
                everything is triggered (started), where many many mods are
                added, and that's where you will start coding. The main
                section is composed of many little threads, but it starts
                with the main thread. And the thread is (and is the only one)
                created by the engine itself, you don't have to use the
                opcode that create threads <span class="code">004F</span> (<span class="general1-reservedword">create_thread</span>) like everyother ones to ingnite it. Don't worry, a whole
                part will be dedicated to threads later.<br>
                <br>
                In the main part you can only use locals variables (&lt;<span class="general1-variable">0@</span>, <span class="general1-variable">1@</span>, <span class="general1-variable">2@</span>, etc...) up to <span class="general1-variable">31@</span> included, <span class="general1-variable">32@</span> and <span class="general1-variable">33@</span> are internals local timers (counts the amount of time
                elapsed, we'll see it later) that you can use too. But any over <span class="general1-variable">33@</span> will not work in the main part. Sanny won't be happy and
                will tell you that the local var. is out of range (that's why
                we've turned "Range check" option on). You can use any
                globals you want but their number is limited to 16383, it
                should be far enough.<br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                - Now Mission section :<br>
                <br>
                <br>
                Then after :<br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON"><span class="general1-comment">//-------------Mission 0---------------
// Originally: Initial 1</span><br>
<span class="general1-label">:INITIAL</span>
03A4: name_thread <span class="general1-string">'INITIAL'</span>
06C8: enable_riot <span class="general1-number">0</span>
0004: <span class="general1-variable">$1515</span> = <span class="general1-number">0</span>
0005: <span class="general1-variable">$1500</span> = <span class="general1-number">5.0</span>
etc...</pre></div>
                <br>
                It's the first mission (which actually ain't a mission
                because it's done during the first milliseconds of a new game
                before the cutscene and doesn't give any mission points).
                This mission actually create parked cars, some weapons pick
                up and other thing.<br>
                <br>
                <br>
                <br>
                <br>
                After will get to the mission 1 (search mission 1) <br><strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON"><span class="general1-comment">//-------------Mission 1---------------
// Originally: Initial 2</span><br>
<span class="general1-label">:INITIL2</span>
03A4: name_thread <span class="general1-string">'INITIL2'</span>
0004: <span class="general1-variable">$3407</span> = <span class="general1-number">25</span>
0004: <span class="general1-variable">$3408</span> = <span class="general1-number">100</span>
0004: <span class="general1-variable">$3409</span> = <span class="general1-number">250</span>
etc...</pre></div>
                <br>
                Same as mission 0 it's not a mission, it only set some
                variables equal to number value, parked some cars again, activate some doors and lifts.<br>
                <br>
                <br>
                Then Mission 2<br>
               <strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON"><span class="general1-comment">//-------------Mission 2---------------
// Originally: Intro</span><br>
<span class="general1-label">:INTRO</span>
03A4: name_thread <span class="general1-string">'INTRO'</span>
0050: <span class="general1-reservedword">gosub</span> <span class="general1-label">@INTRO_47</span>
00D6: <span class="general1-reservedword">if</span>
0112:   <span class="general1-reservedword">wasted_or_busted</span> <span class="general1-comment">// mission only</span>
004D: jump_if_false <span class="general1-label">@INTRO_38</span>
0050: <span class="general1-reservedword">gosub</span> <span class="general1-label">@INTRO_9715</span>
etc...</pre></div>
                This one is part of the intro cutscene and the mission ends
                when you got to the red circle at CJ's home (Jonhson House in Ganton).<br>
                <br>
                After there is the arcades games (<span class="general1-comment">originally: Video game: They crawled
                from uranus</span>; <span class="general1-comment">originally: Video game:
                Duality</span>; <span class="general1-comment">originally: Video game: Go Go Space
                Monkey</span>; <span class="general1-comment">originally: Video game: Let's get
                ready to BUMBLE</span>; <span class="general1-comment">originally: Video game: poker</span>) then other thing like pool (<span class="general1-comment">originally: Pool</span>), dance (<span class="general1-comment">originally: Lowrider (bet and
                dance)</span>) and Zero "hidden/bonus" mission (<span class="general1-comment">originally: Beefy Baron</span>) and after those, the "Big smoke" Mission (mission 11) which
                is first mission of the game. <br>
                <br>
                And then like that up to mission's 134 end.<br>
                If you want to add a mission add after that and define it in
                define mission section. (more later on).<br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                - External script section (last section)<br>
                <br>
                <br>
                After the last mission you can see all the defined external
                script starting with the first one <span class="general1-comment">PLAYER_PARACHUTE</span>:<br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON"><span class="general1-comment">//-------------External script 0 (PLAYER_PARACHUTE)---------------</span><br>
<span class="general1-label">:PLCHUTE</span>
03A4: name_thread <span class="general1-string">'PLCHUTE'</span>
0247: request_model <span class="general1-model">#GUN_PARA</span><br>
<span class="general1-label">:PLCHUTE_16</span>
etc...</pre></div>
                <br>
                <br>
                and then <strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON"><span class="general1-comment">//-------------External script 1 (PARACHUTE)---------------</span><br>
<span class="general1-label">:PARACH</span>
03A4: name_thread <span class="general1-string">'PARACH'</span>
0004: <span class="general1-variable">$8275</span> = <span class="general1-number">0</span>
etc...</pre></div>
                <br>
                <br>
                and so on till the 77th external scripts. Many things in
                external scripts, by looking at the name of the external, you
                can often figure out what it is used for.<br>
                <br>
                What's most important for now is the main part.<br>
                <br>
                But still about main.scm architecture, you need to know that
                some things are limited in main.scm look, <a href="http://www.gtaforums.com/index.php?showtopic=213017&amp;view=findpost&amp;%20%20p=3145932" target="_blank">here</a> . As you can see the main size (the
                lenght of all 'main part' threads) is limited to 200 000
                bytes. To know how long the 'main part' is compile and look
                the report it tells you "MAIN size : XXXXXX b." and then the
                biggest mission "Largest Mission : XXXX b." and the Largest
                external script :<br>
                <img src="img/en/Part20I.files/retfyhj2.PNG" width="180" height="197"><br>
                That's why we've set on the option "Show report".<br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <span style="font-size: 14pt; line-height: 100%;"><u><b><a name="2stripop"> 2. Stripped scm and Opcodes : </a></b></u></span>
                 <br>
                <br>
				<span style="font-size: 13pt; line-height: 100%;"><b><u>A.
                Stripped SCM : </u></b></span>
                <br>
                <br>
                <br>
                For your first coding projects you need a main.scm that is
                small (orgininal one is just hudge), and doesn't have thing
                that is useless for scripting. You will gain time compiling
                and not having to wait for the first cutscene. And also
                because of the scm limits, read above. <br>
                <br>
                So a stripped scm is a main.scm which don't contains any
                mission, any external script, any main threads. Contains
                almost nothing, it just creates the player. <br>
                <br>
                You can find one in the folder \data\sa where you installed
                Sanny Builder under the name stripped.txt, it looks weird
                because it's written in Sanny Builder classes syntax, I won't tell
                much you about it, find more in Sanny Builder's Help. Not because it isn't good
                because I think it'll be easier to first learn with the
                "opcode method".<br>
                <br>
                You should have something like
                that :<br>
                <br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2"><span class="general1-comment">{
  use macro (Ctrl+J) "headsa"
  to insert a file header
}</span>
<span class="general1-directive">{$VERSION 3.0.0000}</span>
<span class="general1-reservedword">var</span>
 <span class="general1-variable">$PLAYER_CHAR</span>: Player
<span class="general1-reservedword">end</span> <span class="general1-comment">// var</span>
03A4: name_thread <span class="general1-string">'MAIN'</span>
01F0: set_max_wanted_level_to <span class="general1-number">6 </span>
0111: toggle_wasted_busted_check <span class="general1-number">0 </span>
00C0: set_current_time_hours_to <span class="general1-number">8</span> minutes_to <span class="general1-number">0 </span>
04E4: unknown_refresh_game_renderer_at <span class="general1-number">2488.56 -1666.84 </span>
03CB: set_rendering_origin_at <span class="general1-number">2488.56 -1666.84 13.38 </span>
0053: <span class="general1-variable">$PLAYER_CHAR</span> = create_player <span class="general1-model">#NULL</span> at <span class="general1-number">2488.56 -1666.84 13.38 </span>
01F5: <span class="general1-variable">$PLAYER_ACTOR</span> = create_player_actor <span class="general1-variable">$PLAYER_CHAR </span>
07AF: <span class="general1-variable">$PLAYER_GROUP</span> = player <span class="general1-variable">$PLAYER_CHAR</span> group
0373: set_camera_directly_behind_player
01B6: <span class="general1-reservedword">set_weather</span> <span class="general1-number">0 </span>
0001: <span class="general1-reservedword">wait</span> <span class="general1-number">0</span> ms
087B: set_player $PLAYER_CHAR clothes_texture <span class="general1-string">"PLAYER_FACE"</span> model <span class="general1-string">"HEAD"</span> body_part <span class="general1-number">1</span>
087B: set_player $PLAYER_CHAR clothes_texture <span class="general1-string">"JEANSDENIM"</span> model <span class="general1-string">"JEANS"</span> body_part <span class="general1-number">2</span>
087B: set_player $PLAYER_CHAR clothes_texture <span class="general1-string">"SNEAKERBINCBLK"</span> model <span class="general1-string">"SNEAKER"</span> body_part <span class="general1-number">3</span>
087B: set_player $PLAYER_CHAR clothes_texture <span class="general1-string">"VEST"</span> model <span class="general1-string">"VEST"</span> body_part <span class="general1-number">0 </span>
070D: rebuild_player <span class="general1-variable">$PLAYER_CHAR</span>
01B4: toggle_player <span class="general1-variable">$PLAYER_CHAR</span> can_move <span class="general1-number">1</span>
016A: <span class="general1-reservedword">fade</span> <span class="general1-number">1</span> time <span class="general1-number">0</span>
04BB: <span class="general1-reservedword">select_interior</span> <span class="general1-number">0</span>
0629: change_integer_stat <span class="general1-number">181</span> <span class="general1-reservedword">to</span> <span class="general1-number">4</span>
016C: restart_if_wasted_at <span class="general1-number">2027.77 -1420.52 15.99 angle 137.0</span> town_number <span class="general1-number">0</span>
016D: restart_if_busted_at <span class="general1-number">1550.68 -1675.49 14.51 angle 90.0</span> town_number <span class="general1-number">0</span>
0180: set_on_mission_flag_to <span class="general1-variable">$ONMISSION</span> <span class="general1-comment">// Note: your missions have to use the variable defined here</span>
0004: <span class="general1-variable">$DEFAULT_WAIT_TIME</span> = <span class="general1-number">250</span>
03E6: remove_text_box

<span class="general1-comment">// put your create_thread commands here</span>



<span class="general1-label">:MAIN_LOOP</span>
0001: <span class="general1-reservedword">wait</span> <span class="general1-variable">$DEFAULT_WAIT_TIME</span> ms
00BF: <span class="general1-variable">$TIME_HOURS</span> = current_time_hours, <span class="general1-variable">$TIME_MINS</span> = current_time_minutes
0002: <span class="general1-reservedword">jump</span> @MAIN_LOOP


<span class="general1-comment">// put your mods (threads) here

//-------------Mission 0---------------
// put your missions here



//-------------External script 0---------------
// put your external scripts here</span></pre>
</div>

                <br>
                <br>
                You probably noticed that there isn't a Define section (<span class="code">DEFINE OBJECTS</span>, <span class="code">DEFINE MISSIONS</span>...)
there is nothing to worry here because there isn't anything that needs
to be defined here. As said in the file if you need an header (define
section) press CTRL+J and select headsa. Like on the pic : <img src="img/en/Part20I.files/jyfcgfhgcfgkk.PNG" width="454" height="252"><br>
<br>
				Then you'll get what you're missing :
				<br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">DEFINE MISSIONS <span class="general1-number">0</span>
<span class="general1-comment">//DEFINE MISSION {ID} 0 AT {LABEL} @</span>
DEFINE EXTERNAL_SCRIPTS <span class="general1-number">0</span> <span class="general1-comment">// Use -1 in order not to compile AAA script</span>
<span class="general1-comment">//DEFINE SCRIPT {NAME}  AT {LABEL} @</span>
DEFINE UNKNOWN_EMPTY_SEGMENT <span class="general1-number">0</span>
DEFINE UNKNOWN_THREADS_MEMORY <span class="general1-number">0</span></pre></div><br>
Now you can define your missions and external scripts.<br><br>
To put mods in this stripped scm you need to put your create threads command (like <span class="code">004F:</span> <span class="general1-reservedword">create_thread</span> <span class="general1-label">@MYTHREAD</span>) where it says : <span class="general1-comment">// put your create_thread commands here</span>. And put your scripts after the <span class="general1-label">MAIN_LOOP</span> where it says <span class="general1-comment">// put your mods (threads) here</span>.<br>
                <br>
                <br>
                <br>
<span style="font-size: 13pt; line-height: 100%;"><b><u>B.
                Opcodes : </u></b></span>
                <br>
                <br>
                <br>
				In begining of most lines there is a 4 digit
                number followed by two dots like 0001:, 087B:, 016A: or 004E:
                like this
                <span style="">0605:</span>
                 in Sanny Builder . Those are called opcodes !!!!!!! And
                that's why we've set on the "Write opcodes" option.<br>
                <br>
                <br>
                <br>
                <br>
                <br>
                The opcode is the number of the command (action or operation)
                that the game engine will do with the parameters given, all
                opcodes (expect for a few) has a fixed number of
                parameters.<br>
                <br>
                Parameters (also called Params, or just P1, P2, or %p ) are
                the input (numbers, actors, vehicles, text strings or any type
                of variables) of the command. Sanny builder on bottom left
                tells you how much parameters an opcode needs : <br><br>
                <img src="img/en/Part20I.files/yrrgrg.png" width="206" height="82"><br>
                <br>
                <br>
                Here is two example :<br>
                <br>
                <b>simple</b><br><strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">000A: <span class="general1-variable">3@</span> += <span class="general1-number">1</span> <span class="general1-comment">// integer values</span></pre></div> <br>

                <ul>
<li class="Myli"><span class="code">000A</span>
                     : the opcode which does the operation add to
                  integers</li>
                  <li class="Myli"><span class="general1-variable">3@</span> and <span class="general1-number">1</span>
                     : are the parameters, this opcode has 2 parameters.</li>
                </ul>
                So this get the local variable (more later) <span class="general1-variable">3@</span> and adds one to it, like if <span class="general1-variable">3@</span>
                 was equal to 1 now it will be equal to 2 !!!<br>
                <br>
                <br>
                <b>more complex </b>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2">0605: actor <span class="general1-variable">$PLAYER_ACTOR</span> perform_animation_sequence <span class="general1-string">"ATM"</span> from_file <span class="general1-string">"PED"</span> <span class="general1-number">4.0</span> loop <span class="general1-number">0 0 0 0 6000</span> ms</pre>
</div>
                <ul>
                  <li class="Myli"><span class="code">0605</span>: the opcode of the command </li>
                  <li class="Myli"><span class="general1-variable">$PLAYER_ACTOR</span>, <span class="general1-string">"ATM"</span>, <span class="general1-string">"PED"</span>, <span class="general1-number">4.0</span>
                    , <span class="general1-number">0</span>
                    , <span class="general1-number">0</span>
                    , <span class="general1-number">0</span>
                    , <span class="general1-number">0</span>
                    , <span class="general1-number">6000</span>
                     : are the parameters, this opcode has 9 parameters.</li>
                </ul>
                This command make an existing actor (character) <span class="general1-variable">$PLAYER_ACTOR</span>
                 perform the animation <span class="general1-string">"ATM"</span>
                 in the animation file <span class="general1-string">"PED"</span>
                , <span class="general1-number">4.0</span>
                 is the playback rate of the animation, <span class="code">loop</span>
                <span class="general1-number">0</span>
                 mean it won't do the anim again once finish if the integer
                is set to <span class="general1-number">1</span>
                 the actor will do the again again and again (loop) until
                it's told to do something else (or destroy, or "free"
                -changing it to any others ped you see in the game, opcode
                01C2), then there is other parameters that we will talk later about them. The last
                one is the time for how long the animation will be executed
                by the engine, act like a wait and will make the engine stop
                executing the code until that time.<br>
                <br>
                <br>
                Now to find the opcode you need you have many places :
                <ul>
                  <li class="Myli">Brilliant new "Opcode search tool" in Sanny Builder. In
                    Tools menu, IDE tools, opcode search. Here just write
                    what you're looking for and you'll get a chance to find
                    it. There is a special section in Sanny Builder Help <a href="opcode_search.htm">here</a> at It tells you the keys to
                    copy opcodes to clipboard (selected opcode = Enter), to
                    sort opcodes, etc... It uses the opcodes.txt that is
                    created by Sanny and that you have to recrate manually if you change sacm.ini.<br>
                    <br>
                  </li>
                  <li class="Myli">Original main.scm uncompiled (the more <u>trustable</u>
                    one most times -pretty good explanation and if used here
                    it DOES work-) Thanks to R* for making the game !!!!!
                    Thanks to Barton Waterduck, Sanny Builder authors, and
                    many others who help decompiling the scm, they should
                    recognize themselves (if they have time reading this).
                    <br>
                    <br>
                  </li>
                  <li class="Myli"><a href="http://www.gtaforums.com/index.php?showtopic=194990&amp;view=findpost&amp;%20%20p=2888074" target="_blank">GTA:SA Opcodes</a> @ <a href="http://www.gtaforums.com/" target="_blank">GTAforums</a> the place
                    for opcodes and is very good because it contains good
                    description, explainations, and what the value of a
                    parameter do.<br>
                    Thanks to everyone who posted in the topic and to opius
                    for starting it.<br>
                    <br>
                  </li>
                  <li class="Myli"><a href="http://sa-db.webtools4you.net/" target="_blank">http://sa-db.webtools4you.net/</a> THE
                    interactive database, the best way to use it is to search
                    "nothing" (just clic go) you'll have all opcodes, and
                    then search with your internet browser "find in the
                  page".</li>
                </ul>
                But the best way is to refer to all of them !!! <br>
                <br>
                <br>
                <br>
                The opcode descriptions come from a file called sascm.ini
                which is located in data\sa of Sanny builder installation
                folder. Updating this file will make new descriptions or/and
                change the opcode parameters.
                <ul>
                  <li>Original Sanny Builder sascm.ini is very good I advise
                    you to keep it for the begining.<br>
                    <br>
                  </li>
                  <li class="Myli">Unified opcode databse from PLPynton <a href="http://www.gtaforums.com/index.php?showtopic=248182&amp;view=findpost&amp;%20%20p=3750938" target="_blank">here</a>, or the
                    file <a href="http://www.pysniak.com/robert/gtasa/data/sascm.zip" target="_blank">here</a>.. If you don't want to use the
                    file you can still find some opcodes in the topic. <br>
                    <br>
                    This opcode "database" has two big advantage, because
                    it's very complete and keeps original parameters order,
                    and a disadvantage is that it use a completly different
                    syntax for description. <br>Thanks to PLPynton for creating
                    it.<br>
                    <br>
                    <br>
                  </li>
                  <li class="Myli">Spaceeinstein's sascm.ini <a href="http://www.geocities.com/the_coin_page/SASCM.ini.zip" target="_blank">here</a>. Use the syntax which has always
                    been used. Thanks to him.</li>
                </ul>
                To use the files sascm.ini that are given there you have to
                compile all the files you are working on close Sanny builder
                (if open) put the file in folder \data\sa in Sanny Builder
                installation folder (make backup), open Sanny and uncompile
                the files. Evrytime you change sascm.ini you have to do
                that.<br>
                <br>
                <br>
                <br>
                <center>!!!!!!!!!!!! Important !!!!!!!!!!!!<br>
                <br>
                About sascm.ini, don't mess too much with them, choose one
                and stick to it for a while. Everytime you change it you have
                to convert all your files, or compile and uncompile, but you
                have to watch out for opcode parameters, they get sometimes
                mess up in changing sascm.ini and you'll get crashes and bugs
                (and they'll be very hard to find).<br>
				<br>You
will also have to recreate your opcodes.txt files otherwise completion
with F1 or in the Opcode search. To do this go Tools and "Make
opcodes.txt". My advise is to choose one of those, or keep the one that
is given in Sanny Builder, and don't change it until you have a good
reason to do so.<br>
                The tutorial is made with the sascm.ini given in Sanny
                Builder.</center><br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <span style="font-size: 14pt; line-height: 100%;"><u><b><a name="3paramvar"> 3. Parameters and variables : </a></b></u></span>
                <br>
                <br>
                <br>
                There is different types of parameters :
                <ul>
                  <li class="Myli"><u>integer</u> (or int), also called whole numbers like <span class="general1-number">1</span>
                     or <span class="general1-number">-2</span>
                     or <span class="general1-number">321</span>
                     or any other.<br>
                    <br>
                  </li>
                  <li class="Myli"><u>Floats</u> or floating point values, any decimal
                    number like <span class="general1-number">1.2</span>
                     or <span class="general1-number">-2372.3845</span>. <a href="http://www.gtaforums.com/index.php?showtopic=169526&amp;view=findpost&amp;%20%20p=2352377" target="_blank">More on floating point numbers</a><br>
                    <br>
                  </li>
                  <li class="Myli">An <u>actor</u> like CJ (YOU) which is store in the
                    global variable <span class="general1-variable">$PLAYER_ACTOR</span>
                    , or Ryder ingame character in <span class="general1-variable">$SA_RYDER</span>
                    , or the soldier who watch the gate of the army base in
                    Ryder's mission is store in the local variable <span class="general1-variable">@102</span>
                    . The variable gets called an handle when holding
                    (keeping in memory) an actor (or a car), it will be the
                    name of the object next, the handle form where you grab
                    it. <br>
                    <br>
                  </li>
                  <li class="Myli"><u>A "car"</u> (in coding every vehicle -flying,
                    floating, choppering- is a car), like often the car
                    you're driving <span class="general1-variable">$PLAYER_CAR</span>
                    , well like the actors they're stored in local or global
                    variables. Same as actors when stocking a car in a
                    variable it's then called an handle.<br>
                    <br>
                  </li>
                  <li class="Myli"><u>Model identifier</u> like <span class="general1-model">#CHEETAH</span>, <span class="general1-model">#ARMY</span>, <span class="general1-model">#PARACHUTE</span>, the 3D model of a car, an actor, an object. It
                    refers to the dff files that are store in gta3.img. And
                    this model is needed to be loaded (put in memory) to
                    create cars, actors or objects.<br>
                    <br>
                  </li>
                  <li class="Myli"><u>Short text strings</u> (8 bytes long) like <span class="general1-string">'STRAP_4'</span>
                     or <span class="general1-string">'MTIME3'</span>
                     which are lettred words that the engine "reads" when
                    passing through and look for the file -or the line a the
                    file- named. They're always 7 character maximum. It
                    refers to file names such as gxt, animation files, IPL
                    files (interiors garage etc...) or threads names, text
                    entries (from gxt file), animations (the animation in the
                    animation file), and many other things. Don't worry much
                    it's just a format for the parameter.<br>
                    <br>
                  </li>
                  <li class="Myli"><u>Long text strings</u> (16 bytes or more long,) like <span class="general1-string">"ATM"</span>
                     or <span class="general1-string">"JEANSDENIM"</span>
                    . It's exactly the same as above it's just a format for
                    the parameter, but this one can handle longer words
                    (Sanny's ReadMe says up to 255 characters) and is used
                    even if the word is shorter than 7 characters. You can
                    find more explanations on strings (both short and long in
                    <a href="http://www.gtaforums.com/index.php?showtopic=261006&amp;view=findpost&amp;%20%20p=3940262" target="_blank">this message</a> from Seemann)<br>
                    <br>
                  </li>
                  <li class="Myli"><u>Labels</u> like <span class="general1-label">MAIN_4059</span>which are used only in jumps (and gosubs) because those
                    opcodes (<span class="code">0002: jump</span>
                    <span class="general1-label">@</span>;
                    <span class="code">004D: jump_if_false</span>
                     <span class="general1-label">@</span>; <span class="code">0050: gosub</span>
                    <span class="general1-label">@</span>
                    ; or <span class="code">004F:</span>
                    <span class="general1-reservedword">create_thread</span>
                     <span class="general1-label">@</span>
                     ) make the engine travels to (jump at) the label told.
                    The label is represented with <span class="code">:</span>
                     before it.<br>
                    <br>
                    example :<br><strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="shorty"><span class="general1-label">:label</span>
0001: wait 0 ms
0002: jump <span class="general1-label">@label</span></pre>
</div>
</li></ul>
         <br>
                <br>
                <br>
                <br>
Variables are a little piece of memory where you store
                    something in it. Once you've defined it the engine will remeber it
                    until it's changed or cleared, even after saving the variable will
                    still present (saving saves all the variable and reloads it when the
                    game is loaded). Like when you create an actor you assign it a variable,
                    which would be like it's name. In those you can put anything
                    integer, floats, actors, vehicles, text strings (special format).<br>
                <br>
					Then there is two big family of variables
                    :<ul><li class="Myli">Global variables : which are represented by starting with
                    <span class="general1-variable">$</span>
                    . Globals can be use everywhere in the main.scm. If you
                    set it to something in the main part in mission it will
                    still be accessible and equal to something. Exemples :
                    <span class="general1-variable">$ONMISSION</span>
                    , <span class="general1-variable">$PLAYER_ACTOR</span>.<br>
                    <br>
                  </li>
                  <li class="Myli">Local variables : Locals are represented by an <span class="general1-variable">@</span>
                     at the end like <span class="general1-variable">1@</span>
                    , <span class="general1-variable">2@</span>
                    . Each thread ( created by 004F) has his own set of
                    locals, like <span class="general1-variable">0@</span>
                     in <span class="general1-label">:thread_A</span>
                     isn't the same as <span class="general1-variable">0@</span>
                     in <span class="general1-label">:thread_B</span>. In main part you <u>cannot</u> use over <span class="general1-variable">33@</span>
                     (which is a local timer see downer for more details).
                    But in mission you can use up to <span class="general1-variable">1024@</span>
                     .</li>
                </ul>
                Locals timers : <span class="general1-variable">32@</span>
                 and <span class="general1-variable">33@</span>
                , are internal locals timers, they count the number of
                milliseconds that have elapsed. Like if you set it to 0 ,
                wait 10 seconds and look how much <span class="general1-variable">32@</span>
                 or <span class="general1-variable">33@</span>
                 worth you'll find 10 000. if you set it to 1 000 and wait 5
                second before looking it will then be equal to 6 000 ms. <br>
                <br>
                Short and long text strings : text strings are stored in
                special format of variables. Text string a highlighted in red
                in Sanny. There is 4 kind of text variables 2 for short (8
                bytes, <span class="general1-string">'STRING'</span>
                ) strings, 2 for long strings (16 bytes, <span class="general1-string">"LONGSTRING"</span>
                ) : <br>
                <br>
                For short strings : <br>
                <br>
                - a global text string like : <span class="general1-variable">s$1169</span> or <span class="general1-variable">s$ACTOR_SPEECH_GXT_REFERENCE</span>
                 which can always be accessible like other globals.<br>
                <br>
                - a local text string like : <span class="general1-variable">170@s</span>
                 or <span class="general1-variable">5@s</span>
                 which are accessible only in their own thread.<br>
                <br>
                <br>
                For long strings : <br>
                <br>
                - a global text string : <span class="general1-variable">v$1225</span> or <span class="general1-variable">v$MYLONGSTRING</span>
                , same as short string but for long ones...<br>
                <br>
                - a local long string : <span class="general1-variable">28@v</span>
                , same as short ones...<br>
                <br>
                <br>
                BUT watch out, for exemple<span class="general1-variable">0@s</span>
                 replace <span class="general1-variable">0@</span>
                 if existing and vice versa, it is the same variable but
                they're just in a different format.<br>
                <br>
                <br>
                And I want to remind (or tell) you that a integer and a float
                are different to game engine ( <span class="general1-number">1</span>
                 isn't the same as <span class="general1-number">1.0</span>
                 !!!!!). If the opcode needs a float and you give it a int
                (and vice versa) the game WILL crash. <br>
                You can convert an integer to a float with opcode 008D. And
                convert a float to an integer with 008C.<br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <br>
                <span style="font-size: 14pt; line-height: 100%;"><u><b><a name="4thredlab"> 4. Threads and labels : </a></b></u></span>
                <br>
                <br>
                A thread is a "stand alone" (something that needs nothing but
                itself) piece of code. It's like a program by itself (like an
                opened window on your operating system -like Microsoft
                Windows-). So to use (play ingame with) your future mods
                (programs, windows) you'll need to create a new one. What you
                do with 004F like : <br>
                <strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">004F: <span class="general1-reservedword">create_thread</span> <span class="general1-label">@MYTHREAD</span></pre></div>
                <br>
                <br>
                Threads are like fire in a world with matches (ligther,
                silex, well you cannot "make" fire you need to ingnite it
                from another fire -like the Olympic Flame never switched off
                between 2 olympic games). You must create a new one from an
                existing one. As I said before the main thread is created by
                the engine itself. The <span class="general1-string">'MAIN'</span> thread will
                lite your fire. So if it's the only existing thread (like in
                a stripped main.scm) you'll need to create your thread in the
                main thread BEFORE it gets switched off by (before this line)
                : <br>
                <strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">004E: <span class="general1-reservedword">end_thread</span></pre></div>
                <br>
                <br>
                <br>
                If using a bigger file (like orignal main.scm) just create it
                where there is many others <span class="general1-reservedword">create_thread</span>
                 (004F) like this :<br>
                <br>
                <br>
                <img src="img/en/Part20I.files/THRTH.png" width="240" height="244"><br>
                <br>
                <br>
                Don't worry about "00D7:
                create_thread_with_wasted_busted_check " because their real
                use is actually unknown yet. Use 004F, there is better ways
                to check if player is wasted or busted (like conditional
                opcode 0112). As Seeman tells us later in the topic 004f
                creates a thread with 0 to 32 extra-parameters, and 00d7
                creates a thread with 0 extra-parameters. So don't worry at
                all about 00d7 because 004f does the same and as more
                functionalities. (<a href="http://www.gtaforums.com/index.php?showtopic=261006&amp;view=findpost&amp;%20%20p=3937655" target="_blank">Seemann's message</a>)<br>
                <br>
                <br>
                <br>
                Like I said before in each single thread you've create you
                have for each thread it's very own set of locals from <span class="general1-variable">0@</span> to
                <span class="general1-variable">33@</span> (<span class="general1-variable">32@</span> and <span class="general1-variable">33@</span> being local timers). They're pretty usefull
                because not sucking up memory. <br>
                <br>
                <br>
                <br>
                <br>
                A label is a little piece of thread like <span class="general1-label">:MAIN_4059</span>. Think now the thread as a book (no more fire <img src="img/en/Part20I.files/cry.gif" width="20" height="18">
                 ) and labels would be pages of this book. Then you can
                easily understand that a jump (or jump_if_false, or gosub) to
                a certain label would be like a report to a certain page. <br>
                <br>
                <br>
                I made an animated example for you to see how the game engine
                travels through the labels :<br>
                <img src="img/en/Part20I.files/ASDFG2.gif" width="557" height="327"><br>
                <br>
                The red line represent the code (the engine is called
                sometimes simply the code, like the code reader) going
                through labels.<br>
                <br>
                As you can see the thread <span class="general1-label">label</span>
                 is created from another thread. You can see the code
                "seperating" in two one going to just created thread <span class="general1-label">label</span>
                 one keeps doing the thread it use to do, and it gets ended
                (but could be continuing to do things if you don't end it).
                <br>
                It goes through <span class="general1-label">:label</span> to <span class="general1-label">:label_100</span>. In <span class="general1-label">:label_100</span> you can see there is an "if" with a condition in it,
                followed by a jump_if_false, this means that <u>if</u> <span class="general1-variable">$PLAYER_ACTOR</span>
                 is near position in 3 dimension <span class="general1-number">2498.0 -1711.0 1015.0</span>
                 the code can pass through and jump to <span class="general1-label">:label_200</span>.<br>
                So the code keeps looping in <span class="general1-label">:label_100</span> until the condition is satisfied.<br>
                Then jumps to <span class="general1-label">:label_200</span> without passing through <span class="general1-label">:label_150</span>, going straight to <span class="general1-label">:label_200</span>. Does what it needs to do in <span class="general1-label">:label_200</span> (which is to put the 3D coordinates of actor <span class="general1-variable">$PLAYER_ACTOR</span>
                 into variables <span class="general1-variable">$X_COORD $Y_COORD $Z_COORD</span>).
				Then jumps to <span class="general1-label">:label_150</span>, waits 1minute and jump back <span class="general1-label">:label_100</span> and check again if player's near the point. And will
                do all over again and again and again. You don't have to end
                a thread if you don't need to, it can just keep check
                something to start. Don't forget you got to do something with
                your thread, keep it running or end it but don't let it free.
                <br>
                <br>
                <center>!!!!!!! Notice the wait (0001: wait 0 ms), because it's
                compulsory !!!!!!!!!!!!!<br>
                When looping you have to add a wait so the engine doesn't get
                itself stucked in it, and it won't even crash then it will
                just simply freeze. The only way to recover from it is to
                force resolution change (sometimes just impossible to do, and
                some laptops have a combo key) and end GTA:SA with task
                manager. <br>
                <br>
                If you don't really know if you should add a wait or not just
                add "wait 0 ms", because most times you will not see the
                difference at all, and mostly anything under 500 ms you don't
                notice it. <br></center>
                <br>
                <br>
				                <br>
                <br>                <br>
                <br>                <br>
                <br>                <br>



			<span style="font-size: 14pt; line-height: 100%;"><u><b><a name="5ifscondi"> 5. "If"s and conditional opcodes : </a></b></u></span>
                <br>
                <br>
                What's called an "if" is a code strucutre that checks if
                something is happening. Like :<br>
                if <br>
                I die <br>
                if not then --&gt; I will finish my mods<br>
                --&gt; you give all my unfinished mods to the GTA
                community<br>
                <br>
                <br>
                In Sanny Builder it would look like <br>
                <img src="img/en/Part20I.files/fxcvj.gif" width="277" height="70"><br>
                <br>
                The engine will travel straight through if the something
                checked happens but jump to another label if it doesn't
                happend (004D: jump_if_false @ ). The something (which could
                or not happend) of the if is called a condition, for them you
                use conditionals opcode !!!!!!! And you can put up to seven
                conditions in one if !!!!!!! (I know you're like "Yes I'm so
                happy, that's really change my life !!!!!!...." but... )<br>
                <br>
                <br>
                <br>
                Then there is two kind of multiple conditions ifs :<br>
                <br>
                When you have multiple conditions you might want to have
                <u>all</u> conditions true (happens) or <u>at least one of
                them </u> true.
                <ul>
                  <li class="Myli">if <u>and</u> is when you want <u>all</u> the conditons
                    to be true for passing through like :<br>
                    <img src="img/en/Part20I.files/ytreurfio.png" width="410" height="107"> <br>
                    So here you can see that if all those external scripts
                    are loaded it goes through but then if any of them isn't
                    it will jump to label <span class="general1-label">:INTMAN_1088</span>. You can think it as if this
                    <u>and</u> this <u>and</u> this is OK then go throught if
                    not jump because it's false.<br>
                    <br>
                    <br>
                  </li>
                  <li class="Myli">if <u>or</u> is when you only need <u>one of those</u>
                    conditions to be go through like :<br>
                    <img src="img/en/Part20I.files/sdxfcghj.gif" width="343" height="121"><br>
                    Here it's if any of these door is open keep going but if
                    not jump to <span class="general1-label">:MAIN_4336</span>. You can think it as if this <u>or</u> this
                    <u>or</u> this <u>or</u> happens go througt but if there
                    isn't any that is true jump because it's false.</li>
                </ul>
                <u>And</u> and <u>or</u> are called logic operators.<br>
                <br>
                Notice how it wouldn't make sens to add an <u>or</u> or an
                <u>and</u> in a single condition if. Only one condition, you
                just cannot use them, only one element !!!!! And sanny
                builder won't like it neither it will tell you "hey don't do
                that".<br>
                <br>
                On the other hand don't forget to put an <u>or</u> or an
                <u>and</u> to your multiples conditions ifs, becasue sanny
                won't say anything, the game might not crash, but I'm sure it
                won't work properly, either <u>and</u> or <u>or</u>, but you
                need to put something in multiple conditions ifs.<br>
                <br>
                <br>
                <br>
                <br>
                You can negate all conditional opcodes. Negate is like adding
                a not in the conditons. If actor <b>not</b> dead, or if actor
                not driving. Then it means that to pass through it, the
                condition needs to return false (don't happend). You can
                negate conditional opcodes in mutlpiple conditions ifs too.
                To negate a conditional opcode you have to put a 8 at the
                first digit instead of 0, like :<br>
                <img src="img/en/Part20I.files/ertyhu.gif" width="339" height="59"><br>
                not negated<br>
                <br>
                <br>
                <img src="img/en/Part20I.files/trytugf.gif" width="367" height="59"><br>
                negated<br>
                <br>
                You don't have to write <span class="general1-reservedword">not</span> the compiler (sanny) will not look at it, and it will
                write it when re-uncompiling. But you still can write <span class="general1-reservedword">not</span> if you want, it makes it clearer and easier to work
                with. But you really HAVE TO write the 8 in the opcode.<br>
                <br>
                When you negate all conditions a 'multiple conditions if',
                you have to change around the logic operator.<br>
                <br>
                <img src="img/en/Part20I.files/rettdtyj.gif" width="489" height="208"><br>
                <br>
                <img src="img/en/Part20I.files/ytreurfio3.gif" width="489" height="208"><br>
                <br>
                Those two do the same :
                <ul>
                  <li class="Myli">the first one checks if player is agressive <u>or</u>
                    aiming at actor <span class="general1-variable">14@</span>
                     <u>or</u> aiming at actor <span class="general1-variable">15@</span>
                     <u>or</u> aiming at actor <span class="general1-variable">16@</span>
                     <u>or</u> aiming at actor <span class="general1-variable">17@</span>
                    , if any of those is true the code passes through and
                    jump to <span class="general1-label">labelz</span>.
				  </li><li class="Myli">the second one check if player is not agressive <u>and</u>
                    not aiming at actor <span class="general1-variable">14@</span>
                     <u>and</u> not aiming at actor <span class="general1-variable">15@</span>
                     <u>and</u> not aiming at actor <span class="general1-variable">16@</span>
                     <u>and</u> not aiming at actor <span class="general1-variable">17@</span>
                    , if any of those is false (if player do aims) the code
                    will jump because it's false to <span class="general1-label">labelz</span>.
					</li></ul>
					Sometimes when look for some nice mods you might find :<br><br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">00D6: <span class="general1-reservedword">if</span> <span class="general1-number">0</span></pre></div>
<br>
or
<br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">00D6: <span class="general1-reservedword">if</span> <span class="general1-number">5</span></pre></div>
<br>
or
<br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">00D6: <span class="general1-reservedword">if</span> <span class="general1-number">21</span></pre></div>
<br>
or
<br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">00D6: <span class="general1-reservedword">if</span> <span class="general1-number">25</span></pre></div><br>


<br><br>Don't worry
                    it's the same, compile, then decompile it and you'll have the
                    logic operator written. And that's why we've enable
                    "Conditions check", so we can use <u>and</u> &amp; <u>or</u>
                    and Sanny writes them when decompiling.
<br>
<br>
if 0 = if
<br>
<br>
if x = if and
<br>
<br>
if 2x = if or
<br>
<br>
Read <a href="conditions.htm">Conditions in Sanny Builder's Help</a> or/and <a href="http://www.gtaforums.com/index.php?showtopic=134970&amp;view=findpost&amp;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20p=2083394" target="_blank">here</a> (It's for Vice City but is the
                    same, just ignore "?") for more explanations.
					<br>
					<br>
					You
                    might want to do high-level conditions construction, read <a href="conditions.htm">Conditions in Sanny Builder's Help</a>, it explains it pretty well. Low level contructions can be good
                    for now, and you can make high level with low level anyway.
					<br>
					<br>
					<br>
					<br>
					<center>BUT remember well when doing "if"s, add waits
                    where you know the code is going to loop back. And a wait 0 is never a
                    problem because it actually wait for 0 milisecond which is pretty short
                    !!!!!!! but it will let time to the engine
                    doing other things. Relook at the animated exemple for labels to
                    understand where you'll absolutly need wait.</center>
					<br>
					<br>
					<br>
					<br>
					<br>
					<br>
					<br>
					<br>
					<br>
					<br>
					<br>
					<br>
					<br>
					<br>
                    <span style="font-size: 14pt; line-height: 100%;"><u><b><a name="6request"> 6. Request models, load them, create, then release them to free memory : </a></b></u></span>
                    <br>
                    <br>
                    When creating actor (with opcode 009A), car (with op
                    00A5), object (with op 0107), give weapon to an actor you
                    have to request the dff model before and load it, and
                    check that is it loaded for real !!!!!!<br>
                    <br>
                    Like : <br>

<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2"><span class="general1-label">:GSHAUTO_564 </span>
0001:<span class="general1-reservedword"> wait</span><span class="general1-number"> 0</span> ms
0247: request_model<span class="general1-model"> #HFYBE</span>
0247: request_model<span class="general1-model"> #POLICE_BARRIER </span>
0247: request_model <span class="general1-model">#BMYBOUN </span>
0247: request_model <span class="general1-model">#WMYBOUN </span>
0247: request_model<span class="general1-model"> #DESERT_EAGLE </span>
0247: request_model <span class="general1-model">#MP5LNG</span> 0247: request_model <span class="general1-model">#CHEETAH</span>
0247: request_model <span class="general1-model">#TURISMO </span>
038B: load_requested_models
00D6: <span class="general1-reservedword">if and</span>
 0248: model<span class="general1-model"> #HFYBE</span> available
 0248: model<span class="general1-model"> #BMYBOUN </span>available
 0248: model<span class="general1-model"> #WMYBOUN</span> available
 0248: model <span class="general1-model">#DESERT_EAGLE</span> available
 0248: model<span class="general1-model"> #MP5LNG</span> available
004D: jump_if_false<span class="general1-label"> @GSHAUTO_564 </span>
00D6: <span class="general1-reservedword">if and</span>
 0248: model <span class="general1-model">#POLICE_BARRIER</span> available
 0248: model <span class="general1-model">#CHEETAH</span> available
 0248: model <span class="general1-model">#TURISMO</span> available
004D: jump_if_false<span class="general1-label"> @GSHAUTO_564 </span>
009A: <span class="general1-variable">11@</span> = create_actor <span class="general1-number">4</span> <span class="general1-model">#WMYBOUN</span> at <span class="general1-number">561.0 -1252.0 17.0 </span>
009A: <span class="general1-variable">14@</span> = create_actor <span class="general1-number">4</span> <span class="general1-model">#BMYBOUN</span> at <span class="general1-number">552.0 -1257.0 17.0 </span>
009A: <span class="general1-variable">15@</span> = create_actor <span class="general1-number">5</span> <span class="general1-model">#HFYBE</span> at<span class="general1-number"> 567.0 -1290.0 17.5 </span>
009A: <span class="general1-variable">16@</span> = create_actor<span class="general1-number"> 4</span> <span class="general1-model">#WMYBOUN</span> at<span class="general1-number"> 561.0 -1255.0 17.0 </span>
009A: <span class="general1-variable">17@</span> = create_actor <span class="general1-number">4</span> <span class="general1-model">#BMYBOUN</span> at<span class="general1-number"> 553.5 -1260.0 17.0 </span>
009A: <span class="general1-variable">18@</span> = create_actor <span class="general1-number">4</span> <span class="general1-model">#WMYBOUN</span> at<span class="general1-number"> 569.0 -1292.0 17.5 </span>
009A: <span class="general1-variable">19@</span> = create_actor <span class="general1-number">4</span><span class="general1-model"> #BMYBOUN</span> at <span class="general1-number">569.0 -1288.0 17.5 </span>
0107: <span class="general1-variable">9@ </span>= create_object<span class="general1-model"> #POLICE_BARRIER</span> at<span class="general1-number"> 560.0 -1254.0 17.0 </span>
00A5: <span class="general1-variable">0@</span> = create_car <span class="general1-model">#TURISMO </span>at <span class="general1-number">1793.4956 -1907.4233 12.3992 </span>
00A5: <span class="general1-variable">1@</span> = create_car <span class="general1-model">#CHEETAH</span> at <span class="general1-number">1793.4956 -1907.4233 12.3992 </span>
01B2: give_actor <span class="general1-variable">11@</span> weapon<span class="general1-number"> 29</span> ammo <span class="general1-number">900</span><span class="general1-comment"> // Load the weapon model before using this</span>
01B2: give_actor <span class="general1-variable">14@</span> weapon<span class="general1-number"> 29</span> ammo <span class="general1-number">900</span><span class="general1-comment"> // Load the weapon model before using this</span>
01B2: give_actor <span class="general1-variable">15@</span> weapon <span class="general1-number">24</span> ammo<span class="general1-number"> 300</span> <span class="general1-comment">// Load the weapon model before using this</span>
01B2: give_actor <span class="general1-variable">16@</span>  weapon<span class="general1-number"> 29</span> ammo <span class="general1-number">900</span><span class="general1-comment"> // Load the weapon model before using this</span>
01B2: give_actor <span class="general1-variable">17@</span> weapon<span class="general1-number"> 29</span> ammo <span class="general1-number">900</span><span class="general1-comment"> // Load the weapon model before using this</span>
01B2: give_actor <span class="general1-variable">18@</span>  weapon<span class="general1-number"> 29</span> ammo <span class="general1-number">900</span><span class="general1-comment"> // Load the weapon model before using this</span>
01B2: give_actor <span class="general1-variable">19@</span> weapon<span class="general1-number"> 29</span> ammo <span class="general1-number">900</span><span class="general1-comment"> // Load the weapon model before using this</span>
</pre>
</div>
                    <br>
                    <br>
                    <br>
                    Look how I first request the models (with 0247:
                    request_model) then load them (with 038B:
                    load_requested_models). Then checks if all models
                    requested are available to use (with 0248). If any of
                    them is load jumps back to top and re-request and reload
                    them. If they all are then create the actor, the weapons
                    and the object. You can see in the comment (after //)
                    that 01B2 need the weapon model to be load before using
                    it (for weapons numbers look in help <a href="SCMHELPGTASA14.htm">here</a> or at very good
					<a href="http://www.gtaforums.com/index.php?showtopic=205020&amp;view=findpost&amp;%20%20p=3013775" target="_blank">Generic SA SCM Documentaion</a>.<br>
                    <br>
                    <br>
                    Once you've finished doing what you need to with thoses
                    (they're all dead, player is too far away, don't want
                    them here, etc...) transform them into usuals peds and
                    cars (like all the peds and cars you see in-game) or
                    destroy them (the object must be destroyed) :<br>
                    <br>
                   <strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2">0108: destroy_object<span class="general1-variable"> 9@</span>
01C3: remove_references_to_car <span class="general1-variable">1@</span> <span class="general1-comment">// Like turning a car into any random car </span>
01C3: remove_references_to_car <span class="general1-variable">0@</span><span class="general1-comment"> // Like turning a car into any random car </span>
01C2: remove_references_to_actor <span class="general1-variable">11@</span> <span class="general1-comment">// Like turning an actor into a random pedestrian </span>
01C2: remove_references_to_actor <span class="general1-variable">14@</span><span class="general1-comment"> // Like turning an actor into a random pedestrian </span>
01C2: remove_references_to_actor <span class="general1-variable">15@</span><span class="general1-comment"> // Like turning an actor into a random pedestrian</span>
01C2: remove_references_to_actor <span class="general1-variable">16@</span><span class="general1-comment"> // Like turning an actor into a random pedestrian</span>
01C2: remove_references_to_actor <span class="general1-variable">17@</span><span class="general1-comment"> // Like turning an actor into a random pedestrian </span>
01C2: remove_references_to_actor <span class="general1-variable">18@</span><span class="general1-comment"> // Like turning an actor into a random pedestrian</span>
01C2: remove_references_to_actor <span class="general1-variable">19@</span><span class="general1-comment"> // Like turning an actor into a random pedestrian </span></pre>
</div>
                    <br>
                    <br>
                    or <strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">0108: destroy_object <span class="general1-variable">9@</span>
00A6: destroy_car <span class="general1-variable">0@</span>
00A6: destroy_car <span class="general1-variable">1@</span>
009B: destroy_actor_instantly <span class="general1-variable">11@</span>
009B: destroy_actor_instantly <span class="general1-variable">14@</span>
009B: destroy_actor_instantly <span class="general1-variable">15@</span>
009B: destroy_actor_instantly <span class="general1-variable">16@</span>
009B: destroy_actor_instantly <span class="general1-variable">17@</span>
009B: destroy_actor_instantly <span class="general1-variable">18@</span>
009B: destroy_actor_instantly <span class="general1-variable">19@</span></pre></div>
                    <br>
                    <br>
                    Don't apply those (01C2, 01C3, 0108, 00A6, 009B, etc...)
                    to an actor, or a car that doesn't exist (or when the
                    handle that should hold it -like 0@, $car, etc...-
                    doesn't hold it), because the game will badly crash!!!!!!
                    <br>
                    <br>
                    Once you got rid of actors/cars/objects (So when you
                    finished using them, and after you have delete them, and
                    only after that), you can release the models you've used
                    because you will no longer need them.<br>
                    <br>
<strong>CODE </strong><br><div class="imgcursor" align="right"><span class="kbd"><img src="img/en/ico_cb.gif" alt="Copy to Clipboard" onClick="ClipBoard2();" height="16" width="16"></span>
<textarea id="holdtext2" style="display: none;"></textarea></div>
<div class="mycode5">
<pre id="copytext2" class="NON">0249: release_model<span class="general1-model"> #WMYBOUN</span>
0249: release_model <span class="general1-model">#BMYBOUN</span>
0249: release_model <span class="general1-model">#HFYBE  </span>
0249: release_model <span class="general1-model">#POLICE_BARRIER</span>
0249: release_model <span class="general1-model">#DESERT_EAGLE</span>
0249: release_model <span class="general1-model">#MP5LNG</span>
0249: release_model <span class="general1-model">#CHEETAH</span>
0249: release_model <span class="general1-model">#TURISMO</span></pre></div>
                    <br>
                    <br>
                    <br>
                    You actualy could have release those models earlier, you don't need them to be loaded <b>after</b>
you have created the game object (object, actor or vehicle). But I
advise you for a start to release the model only at the end of your
script/mission when you sure won't need it anymore. It will prevent you
from a few return to desktop.<br>
                    <br>
                    <br>
                    <br>
                    <br>

                    <span style="font-size: 14pt; line-height: 100%;"><u><b><a name="7conclu"> Conclusion </a></b></u></span>
                     <br>
                    <br>
                    <br>
                    Well, this part was mostly informations, there isn't much
                    to do. But now you know that an opcode is a 4 digit number
                    that do things in the game depending on the parameters you gave it. You know
                    the different types of parameters, what's a local
                    variable and what's a global one. Creating, naming and ending threads, and many other things
                    that you need to know to keep going. Now we speak the
                    same "language" we can get to real coding.<br>
                    Let's get to <a href="articles2.htm">part II</a>...<br>
                    <br>
                    Have fun <br>
     </TD>
          <TD width=5
        background="rtd.gif"></TD></TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD width=5><IMG height=20
            src="img/en/mtdlbot.png" width=5 border=0></TD>
          <TD align=left
            background="mtdbgbot.png"></TD>
          <TD class=ninfo align=right
          background="mtdbgbot.png">&nbsp;
            </TD>
          <TD width=5><IMG height=20
            src="img/en/mtdrbot.png" width=5
        border=0></TD></TR></TBODY></TABLE></DIV>
</TD></TR><td width="100%"></TBODY></TABLE>
</TABLE></body></html>
