<!DOCTYPE HTML>
<html>
<head>
<title>Loops</title>
<link rel="stylesheet" type="text/css" href="style/style2.css">
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
</head><body>

<h2>Loops</h2>
<p>A loop is a statement which allows code to be repeatedly executed. Sanny Builder supports three kinds of controls loops: <a href="#REPEAT..UNTIL">repeat</a>, <a href="#WHILE..END">while</a>, <a href="#FOR..END">for</a>.</p>
<h3><a name="FOR..END"></a>FOR loop</h3>

<p>The FOR loop has a strictly certain number of iterations (repetitions).</p>
<p class='syntax'>Syntax:<br>
<span class="reservedword">FOR</span> &lt;loop variable&gt; = &lt;initial value&gt; <span class="reservedword">TO/DOWNTO</span> &lt;final value&gt; [<span class="reservedword">step</span> = 1]<br>
&lt;the loop body&gt;<br>
<span class="reservedword">END</span></p>

<p><strong>&lt;loop variable&gt;</strong> - a variable used as a counter for iterations</p>
<p><strong>&lt;initial value&gt;</strong> - a starting value of the loop variable (any value including a model identifier)</p>
<p><strong>TO/DOWNTO</strong>- increment or decrement the loop variable between iterations</p>
<p><strong>&lt;final value&gt;</strong> - a final value of the loop variable when finished (any value including a model identifier)</p>
<p><strong>&lt;step&gt;</strong> - an optional value the loop variable will be incremented or decremented with between iterations. By default its value is equal to 1.</p>
<p>Example:</p>
<pre><span class="reservedword">var</span>
<span class="variable">$value</span>: int = <span class="number">0</span>
<span class="variable">$final</span>: int = <span class="number">100</span>
<span class="reservedword">end</span>

<span class="reservedword">FOR</span> <span class="variable">$MyCounter</span> = <span class="number">1</span> <span class="reservedword">to</span> <span class="variable">$final </span>step <span class="number">2</span>
<span class="variable">$value</span> += <span class="variable">$mycounter</span>
<span class="reservedword">end</span></pre>

<p class='note'>If the starting/final values or a step value contained in variables, these variables will get the same type the loop variable has. If the loop variable is not declared with any type before using in a loop it gets an integer type. In order to use the floating-point values as the FOR loop ranges, declare the loop variable with the float type.</p>
<p>Example:</p>
<pre><span class="reservedword">var</span>
<span class="variable">$MyCounter</span>: float
<span class="reservedword">end</span>

<span class="reservedword">FOR</span> <span class="variable">$MyCounter</span> = <span class="number">1.0</span> <span class="reservedword">to</span> <span class="variable">$final</span> step <span class="number">2.0</span>
<span class="reservedword">end</span></pre>
<p>Variables <span class="variable">$MyCounter</span> and <span class="variable">$final</span> both have the Float type after the loop.</p>

<h3><a name="WHILE..END"></a>WHILE loop</h3>
<p class='syntax'>Syntax:<br>
<span class="reservedword">WHILE</span> &lt;loop condition&gt;<br>
&lt;the loop body&gt;<br>
<span class="reservedword">END</span></p>
<p>Example:</p>
<pre><span class="reservedword">while not</span> <span class="model">#AK47</span>.<span class="command">Available</span>
<span class="reservedword">wait</span><span class="number"> 0</span><span class="reservedword">
end</span></pre>
<p>The WHILE loop is working until the loop condition returns true. The condition is evaluated before the loop iterations. Hence, if the condition is false, the statement sequence is never executed.</p>
<pre><span class="variable">$var</span> = <span class="number">10</span>

<span class="reservedword">while</span> <span class="variable">$var</span> > <span class="number">11</span>
inc(<span class="variable">$var</span>)
<span class="reservedword">end</span></pre>

<p>As the condition <span class="variable">$var</span> > <span class="number">11</span> is false, the command inc(<span class="variable">$var</span>) will never be executed.</p>

<p>Constants <span class="reservedword">true</span> and <span class="reservedword">false</span> are valid for the use as the loop condition.</p>
<pre><span class="reservedword">while true</span>
&lt;the loop body&gt;
<span class="reservedword">end</span></pre>
<p>This loop's body executes infinitely until the loop stopped with the command Break.</p>
<pre><span class="reservedword">while false</span>
&lt;the loop body&gt;
<span class="reservedword">end</span></pre>
<p>This loop is ignored by the compiler as the condition is never evaluated.</p>
<p>Currently the compiler accepts only one condition to be checked in the loop condition, but you can check more conditions within the loop body and use the commands Break and Continue.</p>

<h3><a name="REPEAT..UNTIL"></a>REPEAT..UNTIL loop</h3>

<p class='syntax'>Syntax:<br>
<span class="reservedword">REPEAT</span><br>
&lt;the loop body&gt;<br>
<span class="reservedword">UNTIL</span> &lt;loop condition&gt;</p>
<p>The repeat..until loop executes until the loop condition returns False. The condition is evaluated after iteration therefore the loop is guaranteed to be executed at least once.</p>

<p>Constants <span class="reservedword">true</span> and <span class="reservedword">false</span> are valid for the use as the loop condition.</p>

<p><span class="reservedword">repeat</span>..<span class="reservedword">until true</span> - the loop has the only iteration.</p>
<p><span class="reservedword">repeat</span>..<span class="reservedword">until false</span> - the loop executes infinitely until it's stopped with the Break command.</p>
<p>Currently the compiler accepts only one condition to be checked in the loop condition, but you can check more conditions within the loop body and use the commands Break and Continue.</p>

<h3><a name="CONTINUE"></a><a name="BREAK"></a>Continue and Break</h3>
<p>If you want to skip the current iteration and proceed to the next one, use the Continue command. The Break command causes the loop immediately to stop and proceed to the command after the loop body.</p>
<p>They can be used as an opcode parameter (for example, jf continue) or a separate single command.</p>
<p>Example:</p>
<pre><span class="reservedword">if</span>
    <span class="variable">$currentactor</span>.<span class="command">dead</span>
<span class="reservedword">jf</span> Break <span class="comment">// exit from the loop</span>

<span class="reservedword">if</span>
    <span class="reservedword">not </span><span class="variable">$currentactor</span>.<span class="command">dead</span>
<span class="reservedword">then</span>
   Continue <span class="comment">// goes next iteration</span>
<span class="reservedword">end</span>
</pre>

</body></html>
