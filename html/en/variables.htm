<!DOCTYPE HTML>
<html>
<head>
  <title>Variables</title>
<link rel="stylesheet" type="text/css" href="style/style2.css">
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
</head>
<body>

<h2>Variables</h2>

<p>A variable (var) is a named storage location that contains a value and can be read/rewrite many times. There are two kinds of variables:<br>

<h3>Global variables</h3>
Global variables are denoted by a $ (dollar sign, before a name identifier). A global variable name is any combination of letters, underscores, and digits:
<p class="note">$variable1 $100 $____</p>
Their values are available from any place of a code.
<h3>Local variables</h3>
Local variables are denoted by a @ (AT sign, after a name identifier). A local variable name can only include digits:
<p class="note">0@ 999@ 56@</p>
Their values are available only within the current thread or mission.</p>

<p>Threads, external scripts and CLEO scripts each have a limited set of local variables. These sets include variables from 0@ to 33@ in San Andreas and from 0@ to 17@ in GTA 3 and VC. SA missions have a bigger set than usual. They use local variables in range from 0@ to 1023@.</p>

<h3><a name="VAR_END"></a>VAR..END construct</h3>
<p>Variables are commonly used in expressions. If the right operand is a number constant, an opcode is not needed:

<pre><span class="variable">$var</span> = <span class="number">0</span>
<span class="variable">$myarray</span>(<span class="variable">$index</span>, <span class="number">10i</span>) >= <span class="number">150</span></pre></p>

<p>If both operands in an expression are variables, the compiler can not detect a correct opcode, because of unknown type of the variables.
<p>For example, there are two opcodes for incrementing a variable value by another value: 0058 and 0059, one for the integer values and another one for the floating-point values.</p>
<pre>0058: <span class="variable">$Var1</span> += <span class="variable">$Var2</span> // (int)
0059: <span class="variable">$Var1</span> += <span class="variable">$Var2</span> // (float)</pre>
Assuming there is no opcode, which one to use?
<pre><span class="variable">$Var1</span> += <span class="variable">$Var2</span> // ??</pre>
</p>
In order to define a variable type, there is a specific construct.</p>

<p><span class="i">VAR..END construct</span> allows to declare variables and their types for advanced use.</p>

<p class="syntax">Syntax:<br>
<span class="reservedword">var</span><br>&lt;var name&gt;: &lt;type&gt;<br><span class="reservedword">end</span></p>

<p>For example, if both variables were declared, the compiler correctly processes expressions without opcodes:</p>

<pre><span class="reservedword">var</span>
<span class="variable">$Var1</span> : Integer
<span class="variable">$Var2 </span>: Integer
<span class="reservedword">end</span>
<span class="variable">$Var1</span> += <span class="variable">$Var2</span> <span class="comment">// opcode 0058</span></pre>

<a name="type"></a><p>The following types of variables are supported:</p>
	<ul>
	<li>Integer, Int - integer values</li>
	<li>Float - floating-points values</li>
	<li>String, ShortString - a variable containing a string literal with the fixed length (only for arrays, use s$, @s for variables)</li>
	<li>LongString - a variable containing a string literal with the variable length (only for arrays, use v$, @v for variables)</li>
	<li>&lt;Class name&gt; - any available <a href="classes.htm">class name</a></li>
	</ul>

<p>Local variables can be declared too.</p>

<p>Take a note that a declared variable will have the same type in every thread. So, you can redeclare variables to set the new types:</p>

<pre><span class="reservedword">thread</span> <span class="string">'Food'</span>
<span class="reservedword">var</span>
<span class="variable">10@</span> : Float
<span class="variable">$Var</span> : Float
<span class="reservedword">end</span>
<span class="variable">$var</span> = <span class="number">1</span>
<span class="variable">10@</span> = <span class="variable">$Var</span>
<span class="reservedword">end_thread</span>

<span class="reservedword">thread</span> <span class="string">'Loop'</span>
<span class="reservedword">var</span>
<span class="variable">10@ </span>: Int
<span class="variable">$Var</span> : Int
<span class="reservedword">end</span>
<span class="variable">$var</span> = <span class="number">1</span>
<span class="variable">10@ </span>= <span class="variable">$Var</span>
<span class="reservedword">end_thread</span></pre>

<p>In the thread named "Food" 10@ is the floating-point variable. In the one named "Loop" 10@ is the integer variable.</p>

<p>You can redeclare variables as many times as you need.</p>

<h3>Short form of Declaration</h3>
<p>Since v3.2.0 it's possible to declare a variable of a built-in type (Int, Float, String, LongString) shortly using the type name.</p>
<p class="syntax">Syntax:<br> &lt;type&gt;&nbsp;&lt;variable name&gt;</p>
<pre>int <span class="variable">0@</span> <span class="comment">// 0@ declared as an integer variable.</span></pre>

<h3>Variable Initialization</h3>
<p>Also you can set an initial value for the variable when declaring it. Write symbol = and then the initial value:</p>

<pre><span class="reservedword">var</span>
<span class="variable">$fVar</span>: float = <span class="number">1.0</span>
<span class="reservedword">end</span>
</pre>
or
<pre>float <span class="variable">$fVar</span> = <span class="number">1.0</span></pre>
<p>Variable $fVar declared as Float and also the compiler will add an opcode in the script:</p>

<pre>0005: <span class="variable">$fVar</span> = <span class="number">1.0</span></pre>

<p>Initialization is allowed for the variables only, not for arrays.</p>

</body></html>
